// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongd3/go/db"
	"github.com/fullstack-lang/gongd3/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Pie_sql sql.NullBool
var dummy_Pie_time time.Duration
var dummy_Pie_sort sort.Float64Slice

// PieAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model pieAPI
type PieAPI struct {
	gorm.Model

	models.Pie_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	PiePointersEncoding PiePointersEncoding
}

// PiePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type PiePointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field X is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	XID sql.NullInt64

	// field Y is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	YID sql.NullInt64

	// field Set is a slice of pointers to another Struct (optional or 0..1)
	Set IntSlice `gorm:"type:TEXT"`
}

// PieDB describes a pie in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model pieDB
type PieDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field pieDB.Name
	Name_Data sql.NullString

	// Declation for basic field pieDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field pieDB.Heigth
	Heigth_Data sql.NullFloat64

	// Declation for basic field pieDB.Margin
	Margin_Data sql.NullFloat64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	PiePointersEncoding
}

// PieDBs arrays pieDBs
// swagger:response pieDBsResponse
type PieDBs []PieDB

// PieDBResponse provides response
// swagger:response pieDBResponse
type PieDBResponse struct {
	PieDB
}

// PieWOP is a Pie without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type PieWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Width float64 `xlsx:"2"`

	Heigth float64 `xlsx:"3"`

	Margin float64 `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Pie_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Width",
	"Heigth",
	"Margin",
}

type BackRepoPieStruct struct {
	// stores PieDB according to their gorm ID
	Map_PieDBID_PieDB map[uint]*PieDB

	// stores PieDB ID according to Pie address
	Map_PiePtr_PieDBID map[*models.Pie]uint

	// stores Pie according to their gorm ID
	Map_PieDBID_PiePtr map[uint]*models.Pie

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoPie *BackRepoPieStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoPie.stage
	return
}

func (backRepoPie *BackRepoPieStruct) GetDB() db.DBInterface {
	return backRepoPie.db
}

// GetPieDBFromPiePtr is a handy function to access the back repo instance from the stage instance
func (backRepoPie *BackRepoPieStruct) GetPieDBFromPiePtr(pie *models.Pie) (pieDB *PieDB) {
	id := backRepoPie.Map_PiePtr_PieDBID[pie]
	pieDB = backRepoPie.Map_PieDBID_PieDB[id]
	return
}

// BackRepoPie.CommitPhaseOne commits all staged instances of Pie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPie *BackRepoPieStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for pie := range stage.Pies {
		backRepoPie.CommitPhaseOneInstance(pie)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, pie := range backRepoPie.Map_PieDBID_PiePtr {
		if _, ok := stage.Pies[pie]; !ok {
			backRepoPie.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoPie.CommitDeleteInstance commits deletion of Pie to the BackRepo
func (backRepoPie *BackRepoPieStruct) CommitDeleteInstance(id uint) (Error error) {

	pie := backRepoPie.Map_PieDBID_PiePtr[id]

	// pie is not staged anymore, remove pieDB
	pieDB := backRepoPie.Map_PieDBID_PieDB[id]
	db, _ := backRepoPie.db.Unscoped()
	_, err := db.Delete(&pieDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoPie.Map_PiePtr_PieDBID, pie)
	delete(backRepoPie.Map_PieDBID_PiePtr, id)
	delete(backRepoPie.Map_PieDBID_PieDB, id)

	return
}

// BackRepoPie.CommitPhaseOneInstance commits pie staged instances of Pie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoPie *BackRepoPieStruct) CommitPhaseOneInstance(pie *models.Pie) (Error error) {

	// check if the pie is not commited yet
	if _, ok := backRepoPie.Map_PiePtr_PieDBID[pie]; ok {
		return
	}

	// initiate pie
	var pieDB PieDB
	pieDB.CopyBasicFieldsFromPie(pie)

	_, err := backRepoPie.db.Create(&pieDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoPie.Map_PiePtr_PieDBID[pie] = pieDB.ID
	backRepoPie.Map_PieDBID_PiePtr[pieDB.ID] = pie
	backRepoPie.Map_PieDBID_PieDB[pieDB.ID] = &pieDB

	return
}

// BackRepoPie.CommitPhaseTwo commits all staged instances of Pie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPie *BackRepoPieStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, pie := range backRepoPie.Map_PieDBID_PiePtr {
		backRepoPie.CommitPhaseTwoInstance(backRepo, idx, pie)
	}

	return
}

// BackRepoPie.CommitPhaseTwoInstance commits {{structname }} of models.Pie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPie *BackRepoPieStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, pie *models.Pie) (Error error) {

	// fetch matching pieDB
	if pieDB, ok := backRepoPie.Map_PieDBID_PieDB[idx]; ok {

		pieDB.CopyBasicFieldsFromPie(pie)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value pie.X translates to updating the pie.XID
		pieDB.XID.Valid = true // allow for a 0 value (nil association)
		if pie.X != nil {
			if XId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[pie.X]; ok {
				pieDB.XID.Int64 = int64(XId)
				pieDB.XID.Valid = true
			}
		} else {
			pieDB.XID.Int64 = 0
			pieDB.XID.Valid = true
		}

		// commit pointer value pie.Y translates to updating the pie.YID
		pieDB.YID.Valid = true // allow for a 0 value (nil association)
		if pie.Y != nil {
			if YId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[pie.Y]; ok {
				pieDB.YID.Int64 = int64(YId)
				pieDB.YID.Valid = true
			}
		} else {
			pieDB.YID.Int64 = 0
			pieDB.YID.Valid = true
		}

		// 1. reset
		pieDB.PiePointersEncoding.Set = make([]int, 0)
		// 2. encode
		for _, serieAssocEnd := range pie.Set {
			serieAssocEnd_DB :=
				backRepo.BackRepoSerie.GetSerieDBFromSeriePtr(serieAssocEnd)
			
			// the stage might be inconsistant, meaning that the serieAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if serieAssocEnd_DB == nil {
				continue
			}
			
			pieDB.PiePointersEncoding.Set =
				append(pieDB.PiePointersEncoding.Set, int(serieAssocEnd_DB.ID))
		}

		_, err := backRepoPie.db.Save(&pieDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Pie intance %s", pie.Name))
		return err
	}

	return
}

// BackRepoPie.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoPie *BackRepoPieStruct) CheckoutPhaseOne() (Error error) {

	pieDBArray := make([]PieDB, 0)
	_, err := backRepoPie.db.Find(&pieDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	pieInstancesToBeRemovedFromTheStage := make(map[*models.Pie]any)
	for key, value := range backRepoPie.stage.Pies {
		pieInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, pieDB := range pieDBArray {
		backRepoPie.CheckoutPhaseOneInstance(&pieDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		pie, ok := backRepoPie.Map_PieDBID_PiePtr[pieDB.ID]
		if ok {
			delete(pieInstancesToBeRemovedFromTheStage, pie)
		}
	}

	// remove from stage and back repo's 3 maps all pies that are not in the checkout
	for pie := range pieInstancesToBeRemovedFromTheStage {
		pie.Unstage(backRepoPie.GetStage())

		// remove instance from the back repo 3 maps
		pieID := backRepoPie.Map_PiePtr_PieDBID[pie]
		delete(backRepoPie.Map_PiePtr_PieDBID, pie)
		delete(backRepoPie.Map_PieDBID_PieDB, pieID)
		delete(backRepoPie.Map_PieDBID_PiePtr, pieID)
	}

	return
}

// CheckoutPhaseOneInstance takes a pieDB that has been found in the DB, updates the backRepo and stages the
// models version of the pieDB
func (backRepoPie *BackRepoPieStruct) CheckoutPhaseOneInstance(pieDB *PieDB) (Error error) {

	pie, ok := backRepoPie.Map_PieDBID_PiePtr[pieDB.ID]
	if !ok {
		pie = new(models.Pie)

		backRepoPie.Map_PieDBID_PiePtr[pieDB.ID] = pie
		backRepoPie.Map_PiePtr_PieDBID[pie] = pieDB.ID

		// append model store with the new element
		pie.Name = pieDB.Name_Data.String
		pie.Stage(backRepoPie.GetStage())
	}
	pieDB.CopyBasicFieldsToPie(pie)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	pie.Stage(backRepoPie.GetStage())

	// preserve pointer to pieDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_PieDBID_PieDB)[pieDB hold variable pointers
	pieDB_Data := *pieDB
	preservedPtrToPie := &pieDB_Data
	backRepoPie.Map_PieDBID_PieDB[pieDB.ID] = preservedPtrToPie

	return
}

// BackRepoPie.CheckoutPhaseTwo Checkouts all staged instances of Pie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPie *BackRepoPieStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, pieDB := range backRepoPie.Map_PieDBID_PieDB {
		backRepoPie.CheckoutPhaseTwoInstance(backRepo, pieDB)
	}
	return
}

// BackRepoPie.CheckoutPhaseTwoInstance Checkouts staged instances of Pie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPie *BackRepoPieStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, pieDB *PieDB) (Error error) {

	pie := backRepoPie.Map_PieDBID_PiePtr[pieDB.ID]

	pieDB.DecodePointers(backRepo, pie)

	return
}

func (pieDB *PieDB) DecodePointers(backRepo *BackRepoStruct, pie *models.Pie) {

	// insertion point for checkout of pointer encoding
	// X field
	pie.X = nil
	if pieDB.XID.Int64 != 0 {
		pie.X = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(pieDB.XID.Int64)]
	}
	// Y field
	pie.Y = nil
	if pieDB.YID.Int64 != 0 {
		pie.Y = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(pieDB.YID.Int64)]
	}
	// This loop redeem pie.Set in the stage from the encode in the back repo
	// It parses all SerieDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	pie.Set = pie.Set[:0]
	for _, _Serieid := range pieDB.PiePointersEncoding.Set {
		pie.Set = append(pie.Set, backRepo.BackRepoSerie.Map_SerieDBID_SeriePtr[uint(_Serieid)])
	}

	return
}

// CommitPie allows commit of a single pie (if already staged)
func (backRepo *BackRepoStruct) CommitPie(pie *models.Pie) {
	backRepo.BackRepoPie.CommitPhaseOneInstance(pie)
	if id, ok := backRepo.BackRepoPie.Map_PiePtr_PieDBID[pie]; ok {
		backRepo.BackRepoPie.CommitPhaseTwoInstance(backRepo, id, pie)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitPie allows checkout of a single pie (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutPie(pie *models.Pie) {
	// check if the pie is staged
	if _, ok := backRepo.BackRepoPie.Map_PiePtr_PieDBID[pie]; ok {

		if id, ok := backRepo.BackRepoPie.Map_PiePtr_PieDBID[pie]; ok {
			var pieDB PieDB
			pieDB.ID = id

			if _, err := backRepo.BackRepoPie.db.First(&pieDB, id); err != nil {
				log.Fatalln("CheckoutPie : Problem with getting object with id:", id)
			}
			backRepo.BackRepoPie.CheckoutPhaseOneInstance(&pieDB)
			backRepo.BackRepoPie.CheckoutPhaseTwoInstance(backRepo, &pieDB)
		}
	}
}

// CopyBasicFieldsFromPie
func (pieDB *PieDB) CopyBasicFieldsFromPie(pie *models.Pie) {
	// insertion point for fields commit

	pieDB.Name_Data.String = pie.Name
	pieDB.Name_Data.Valid = true

	pieDB.Width_Data.Float64 = pie.Width
	pieDB.Width_Data.Valid = true

	pieDB.Heigth_Data.Float64 = pie.Heigth
	pieDB.Heigth_Data.Valid = true

	pieDB.Margin_Data.Float64 = pie.Margin
	pieDB.Margin_Data.Valid = true
}

// CopyBasicFieldsFromPie_WOP
func (pieDB *PieDB) CopyBasicFieldsFromPie_WOP(pie *models.Pie_WOP) {
	// insertion point for fields commit

	pieDB.Name_Data.String = pie.Name
	pieDB.Name_Data.Valid = true

	pieDB.Width_Data.Float64 = pie.Width
	pieDB.Width_Data.Valid = true

	pieDB.Heigth_Data.Float64 = pie.Heigth
	pieDB.Heigth_Data.Valid = true

	pieDB.Margin_Data.Float64 = pie.Margin
	pieDB.Margin_Data.Valid = true
}

// CopyBasicFieldsFromPieWOP
func (pieDB *PieDB) CopyBasicFieldsFromPieWOP(pie *PieWOP) {
	// insertion point for fields commit

	pieDB.Name_Data.String = pie.Name
	pieDB.Name_Data.Valid = true

	pieDB.Width_Data.Float64 = pie.Width
	pieDB.Width_Data.Valid = true

	pieDB.Heigth_Data.Float64 = pie.Heigth
	pieDB.Heigth_Data.Valid = true

	pieDB.Margin_Data.Float64 = pie.Margin
	pieDB.Margin_Data.Valid = true
}

// CopyBasicFieldsToPie
func (pieDB *PieDB) CopyBasicFieldsToPie(pie *models.Pie) {
	// insertion point for checkout of basic fields (back repo to stage)
	pie.Name = pieDB.Name_Data.String
	pie.Width = pieDB.Width_Data.Float64
	pie.Heigth = pieDB.Heigth_Data.Float64
	pie.Margin = pieDB.Margin_Data.Float64
}

// CopyBasicFieldsToPie_WOP
func (pieDB *PieDB) CopyBasicFieldsToPie_WOP(pie *models.Pie_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	pie.Name = pieDB.Name_Data.String
	pie.Width = pieDB.Width_Data.Float64
	pie.Heigth = pieDB.Heigth_Data.Float64
	pie.Margin = pieDB.Margin_Data.Float64
}

// CopyBasicFieldsToPieWOP
func (pieDB *PieDB) CopyBasicFieldsToPieWOP(pie *PieWOP) {
	pie.ID = int(pieDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	pie.Name = pieDB.Name_Data.String
	pie.Width = pieDB.Width_Data.Float64
	pie.Heigth = pieDB.Heigth_Data.Float64
	pie.Margin = pieDB.Margin_Data.Float64
}

// Backup generates a json file from a slice of all PieDB instances in the backrepo
func (backRepoPie *BackRepoPieStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "PieDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PieDB, 0)
	for _, pieDB := range backRepoPie.Map_PieDBID_PieDB {
		forBackup = append(forBackup, pieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Pie ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Pie file", err.Error())
	}
}

// Backup generates a json file from a slice of all PieDB instances in the backrepo
func (backRepoPie *BackRepoPieStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*PieDB, 0)
	for _, pieDB := range backRepoPie.Map_PieDBID_PieDB {
		forBackup = append(forBackup, pieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Pie")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Pie_Fields, -1)
	for _, pieDB := range forBackup {

		var pieWOP PieWOP
		pieDB.CopyBasicFieldsToPieWOP(&pieWOP)

		row := sh.AddRow()
		row.WriteStruct(&pieWOP, -1)
	}
}

// RestoreXL from the "Pie" sheet all PieDB instances
func (backRepoPie *BackRepoPieStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoPieid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Pie"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoPie.rowVisitorPie)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoPie *BackRepoPieStruct) rowVisitorPie(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var pieWOP PieWOP
		row.ReadStruct(&pieWOP)

		// add the unmarshalled struct to the stage
		pieDB := new(PieDB)
		pieDB.CopyBasicFieldsFromPieWOP(&pieWOP)

		pieDB_ID_atBackupTime := pieDB.ID
		pieDB.ID = 0
		_, err := backRepoPie.db.Create(pieDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPie.Map_PieDBID_PieDB[pieDB.ID] = pieDB
		BackRepoPieid_atBckpTime_newID[pieDB_ID_atBackupTime] = pieDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "PieDB.json" in dirPath that stores an array
// of PieDB and stores it in the database
// the map BackRepoPieid_atBckpTime_newID is updated accordingly
func (backRepoPie *BackRepoPieStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoPieid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "PieDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Pie file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*PieDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_PieDBID_PieDB
	for _, pieDB := range forRestore {

		pieDB_ID_atBackupTime := pieDB.ID
		pieDB.ID = 0
		_, err := backRepoPie.db.Create(pieDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoPie.Map_PieDBID_PieDB[pieDB.ID] = pieDB
		BackRepoPieid_atBckpTime_newID[pieDB_ID_atBackupTime] = pieDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Pie file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Pie>id_atBckpTime_newID
// to compute new index
func (backRepoPie *BackRepoPieStruct) RestorePhaseTwo() {

	for _, pieDB := range backRepoPie.Map_PieDBID_PieDB {

		// next line of code is to avert unused variable compilation error
		_ = pieDB

		// insertion point for reindexing pointers encoding
		// reindexing X field
		if pieDB.XID.Int64 != 0 {
			pieDB.XID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(pieDB.XID.Int64)])
			pieDB.XID.Valid = true
		}

		// reindexing Y field
		if pieDB.YID.Int64 != 0 {
			pieDB.YID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(pieDB.YID.Int64)])
			pieDB.YID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoPie.db.Model(pieDB)
		_, err := db.Updates(*pieDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoPie.ResetReversePointers commits all staged instances of Pie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoPie *BackRepoPieStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, pie := range backRepoPie.Map_PieDBID_PiePtr {
		backRepoPie.ResetReversePointersInstance(backRepo, idx, pie)
	}

	return
}

func (backRepoPie *BackRepoPieStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, pie *models.Pie) (Error error) {

	// fetch matching pieDB
	if pieDB, ok := backRepoPie.Map_PieDBID_PieDB[idx]; ok {
		_ = pieDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoPieid_atBckpTime_newID map[uint]uint
