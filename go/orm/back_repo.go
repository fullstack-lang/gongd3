// generated by genORMTranslation.go
package orm

import (
	"bufio"
	"bytes"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"gorm.io/gorm"

	"gongd3/go/models"

	"github.com/tealeg/xlsx/v3"
)

// BackRepoStruct supports callback functions
type BackRepoStruct struct {
	// insertion point for per struct back repo declarations
	BackRepoBar BackRepoBarStruct

	BackRepoKey BackRepoKeyStruct

	BackRepoPie BackRepoPieStruct

	BackRepoScatter BackRepoScatterStruct

	BackRepoSerie BackRepoSerieStruct

	BackRepoValue BackRepoValueStruct

	CommitFromBackNb uint // this ng is updated at the BackRepo level but also at the BackRepo<GongStruct> level

	PushFromFrontNb uint // records increments from push from front
}

func (backRepo *BackRepoStruct) GetLastCommitFromBackNb() uint {
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) GetLastPushFromFrontNb() uint {
	return backRepo.PushFromFrontNb
}

func (backRepo *BackRepoStruct) IncrementCommitFromBackNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	if models.Stage.OnInitCommitFromBackCallback != nil {
		models.Stage.OnInitCommitFromBackCallback.BeforeCommit(&models.Stage)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
	return backRepo.CommitFromBackNb
}

func (backRepo *BackRepoStruct) IncrementPushFromFrontNb() uint {
	if models.Stage.OnInitCommitCallback != nil {
		models.Stage.OnInitCommitCallback.BeforeCommit(&models.Stage)
	}
	if models.Stage.OnInitCommitFromFrontCallback != nil {
		models.Stage.OnInitCommitFromFrontCallback.BeforeCommit(&models.Stage)
	}
	backRepo.PushFromFrontNb = backRepo.PushFromFrontNb + 1
	return backRepo.CommitFromBackNb
}

// Init the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) init(db *gorm.DB) {
	// insertion point for per struct back repo declarations
	backRepo.BackRepoBar.Init(db)
	backRepo.BackRepoKey.Init(db)
	backRepo.BackRepoPie.Init(db)
	backRepo.BackRepoScatter.Init(db)
	backRepo.BackRepoSerie.Init(db)
	backRepo.BackRepoValue.Init(db)

	models.Stage.BackRepo = backRepo
}

// Commit the BackRepoStruct inner variables and link to the database
func (backRepo *BackRepoStruct) Commit(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoBar.CommitPhaseOne(stage)
	backRepo.BackRepoKey.CommitPhaseOne(stage)
	backRepo.BackRepoPie.CommitPhaseOne(stage)
	backRepo.BackRepoScatter.CommitPhaseOne(stage)
	backRepo.BackRepoSerie.CommitPhaseOne(stage)
	backRepo.BackRepoValue.CommitPhaseOne(stage)

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoBar.CommitPhaseTwo(backRepo)
	backRepo.BackRepoKey.CommitPhaseTwo(backRepo)
	backRepo.BackRepoPie.CommitPhaseTwo(backRepo)
	backRepo.BackRepoScatter.CommitPhaseTwo(backRepo)
	backRepo.BackRepoSerie.CommitPhaseTwo(backRepo)
	backRepo.BackRepoValue.CommitPhaseTwo(backRepo)

	backRepo.IncrementCommitFromBackNb()
}

// Checkout the database into the stage
func (backRepo *BackRepoStruct) Checkout(stage *models.StageStruct) {
	// insertion point for per struct back repo phase one commit
	backRepo.BackRepoBar.CheckoutPhaseOne()
	backRepo.BackRepoKey.CheckoutPhaseOne()
	backRepo.BackRepoPie.CheckoutPhaseOne()
	backRepo.BackRepoScatter.CheckoutPhaseOne()
	backRepo.BackRepoSerie.CheckoutPhaseOne()
	backRepo.BackRepoValue.CheckoutPhaseOne()

	// insertion point for per struct back repo phase two commit
	backRepo.BackRepoBar.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoKey.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoPie.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoScatter.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoSerie.CheckoutPhaseTwo(backRepo)
	backRepo.BackRepoValue.CheckoutPhaseTwo(backRepo)
}

var BackRepo BackRepoStruct

func GetLastCommitFromBackNb() uint {
	return BackRepo.GetLastCommitFromBackNb()
}

func GetLastPushFromFrontNb() uint {
	return BackRepo.GetLastPushFromFrontNb()
}

// Backup the BackRepoStruct
func (backRepo *BackRepoStruct) Backup(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// insertion point for per struct backup
	backRepo.BackRepoBar.Backup(dirPath)
	backRepo.BackRepoKey.Backup(dirPath)
	backRepo.BackRepoPie.Backup(dirPath)
	backRepo.BackRepoScatter.Backup(dirPath)
	backRepo.BackRepoSerie.Backup(dirPath)
	backRepo.BackRepoValue.Backup(dirPath)
}

// Backup in XL the BackRepoStruct
func (backRepo *BackRepoStruct) BackupXL(stage *models.StageStruct, dirPath string) {
	os.MkdirAll(dirPath, os.ModePerm)

	// open an existing file
	file := xlsx.NewFile()

	// insertion point for per struct backup
	backRepo.BackRepoBar.BackupXL(file)
	backRepo.BackRepoKey.BackupXL(file)
	backRepo.BackRepoPie.BackupXL(file)
	backRepo.BackRepoScatter.BackupXL(file)
	backRepo.BackRepoSerie.BackupXL(file)
	backRepo.BackRepoValue.BackupXL(file)

	var b bytes.Buffer
	writer := bufio.NewWriter(&b)
	file.Write(writer)
	theBytes := b.Bytes()

	filename := filepath.Join(dirPath, "bckp.xlsx")
	err := ioutil.WriteFile(filename, theBytes, 0644)
	if err != nil {
		log.Panic("Cannot write the XL file", err.Error())
	}
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) Restore(stage *models.StageStruct, dirPath string) {
	models.Stage.Commit()
	models.Stage.Reset()
	models.Stage.Checkout()

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoBar.RestorePhaseOne(dirPath)
	backRepo.BackRepoKey.RestorePhaseOne(dirPath)
	backRepo.BackRepoPie.RestorePhaseOne(dirPath)
	backRepo.BackRepoScatter.RestorePhaseOne(dirPath)
	backRepo.BackRepoSerie.RestorePhaseOne(dirPath)
	backRepo.BackRepoValue.RestorePhaseOne(dirPath)

	//
	// restauration second phase (reindex pointers with the new ID)
	//

	// insertion point for per struct backup
	backRepo.BackRepoBar.RestorePhaseTwo()
	backRepo.BackRepoKey.RestorePhaseTwo()
	backRepo.BackRepoPie.RestorePhaseTwo()
	backRepo.BackRepoScatter.RestorePhaseTwo()
	backRepo.BackRepoSerie.RestorePhaseTwo()
	backRepo.BackRepoValue.RestorePhaseTwo()

	models.Stage.Checkout()
}

// Restore the database into the back repo
func (backRepo *BackRepoStruct) RestoreXL(stage *models.StageStruct, dirPath string) {

	// clean the stage
	models.Stage.Reset()

	// commit the cleaned stage
	models.Stage.Commit()

	// open an existing file
	filename := filepath.Join(dirPath, "bckp.xlsx")
	file, err := xlsx.OpenFile(filename)

	if err != nil {
		log.Panic("Cannot read the XL file", err.Error())
	}

	//
	// restauration first phase (create DB instance with new IDs)
	//

	// insertion point for per struct backup
	backRepo.BackRepoBar.RestoreXLPhaseOne(file)
	backRepo.BackRepoKey.RestoreXLPhaseOne(file)
	backRepo.BackRepoPie.RestoreXLPhaseOne(file)
	backRepo.BackRepoScatter.RestoreXLPhaseOne(file)
	backRepo.BackRepoSerie.RestoreXLPhaseOne(file)
	backRepo.BackRepoValue.RestoreXLPhaseOne(file)

	// commit the restored stage
	models.Stage.Commit()
}
