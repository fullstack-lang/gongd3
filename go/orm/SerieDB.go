// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"gongd3/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Serie_sql sql.NullBool
var dummy_Serie_time time.Duration
var dummy_Serie_sort sort.Float64Slice

// SerieAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model serieAPI
type SerieAPI struct {
	gorm.Model

	models.Serie

	// encoding of pointers
	SeriePointersEnconding
}

// SeriePointersEnconding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type SeriePointersEnconding struct {
	// insertion for pointer fields encoding declaration

	// field Key is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	KeyID sql.NullInt64

	// Implementation of a reverse ID for field Bar{}.Set []*Serie
	Bar_SetDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Bar_SetDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Pie{}.Set []*Serie
	Pie_SetDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Pie_SetDBID_Index sql.NullInt64

	// Implementation of a reverse ID for field Scatter{}.Set []*Serie
	Scatter_SetDBID sql.NullInt64

	// implementation of the index of the withing the slice
	Scatter_SetDBID_Index sql.NullInt64
}

// SerieDB describes a serie in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model serieDB
type SerieDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field serieDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	SeriePointersEnconding
}

// SerieDBs arrays serieDBs
// swagger:response serieDBsResponse
type SerieDBs []SerieDB

// SerieDBResponse provides response
// swagger:response serieDBResponse
type SerieDBResponse struct {
	SerieDB
}

// SerieWOP is a Serie without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type SerieWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Serie_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoSerieStruct struct {
	// stores SerieDB according to their gorm ID
	Map_SerieDBID_SerieDB *map[uint]*SerieDB

	// stores SerieDB ID according to Serie address
	Map_SeriePtr_SerieDBID *map[*models.Serie]uint

	// stores Serie according to their gorm ID
	Map_SerieDBID_SeriePtr *map[uint]*models.Serie

	db *gorm.DB
}

func (backRepoSerie *BackRepoSerieStruct) GetDB() *gorm.DB {
	return backRepoSerie.db
}

// GetSerieDBFromSeriePtr is a handy function to access the back repo instance from the stage instance
func (backRepoSerie *BackRepoSerieStruct) GetSerieDBFromSeriePtr(serie *models.Serie) (serieDB *SerieDB) {
	id := (*backRepoSerie.Map_SeriePtr_SerieDBID)[serie]
	serieDB = (*backRepoSerie.Map_SerieDBID_SerieDB)[id]
	return
}

// BackRepoSerie.Init set up the BackRepo of the Serie
func (backRepoSerie *BackRepoSerieStruct) Init(db *gorm.DB) (Error error) {

	if backRepoSerie.Map_SerieDBID_SeriePtr != nil {
		err := errors.New("In Init, backRepoSerie.Map_SerieDBID_SeriePtr should be nil")
		return err
	}

	if backRepoSerie.Map_SerieDBID_SerieDB != nil {
		err := errors.New("In Init, backRepoSerie.Map_SerieDBID_SerieDB should be nil")
		return err
	}

	if backRepoSerie.Map_SeriePtr_SerieDBID != nil {
		err := errors.New("In Init, backRepoSerie.Map_SeriePtr_SerieDBID should be nil")
		return err
	}

	tmp := make(map[uint]*models.Serie, 0)
	backRepoSerie.Map_SerieDBID_SeriePtr = &tmp

	tmpDB := make(map[uint]*SerieDB, 0)
	backRepoSerie.Map_SerieDBID_SerieDB = &tmpDB

	tmpID := make(map[*models.Serie]uint, 0)
	backRepoSerie.Map_SeriePtr_SerieDBID = &tmpID

	backRepoSerie.db = db
	return
}

// BackRepoSerie.CommitPhaseOne commits all staged instances of Serie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSerie *BackRepoSerieStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for serie := range stage.Series {
		backRepoSerie.CommitPhaseOneInstance(serie)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, serie := range *backRepoSerie.Map_SerieDBID_SeriePtr {
		if _, ok := stage.Series[serie]; !ok {
			backRepoSerie.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoSerie.CommitDeleteInstance commits deletion of Serie to the BackRepo
func (backRepoSerie *BackRepoSerieStruct) CommitDeleteInstance(id uint) (Error error) {

	serie := (*backRepoSerie.Map_SerieDBID_SeriePtr)[id]

	// serie is not staged anymore, remove serieDB
	serieDB := (*backRepoSerie.Map_SerieDBID_SerieDB)[id]
	query := backRepoSerie.db.Unscoped().Delete(&serieDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	delete((*backRepoSerie.Map_SeriePtr_SerieDBID), serie)
	delete((*backRepoSerie.Map_SerieDBID_SeriePtr), id)
	delete((*backRepoSerie.Map_SerieDBID_SerieDB), id)

	return
}

// BackRepoSerie.CommitPhaseOneInstance commits serie staged instances of Serie to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoSerie *BackRepoSerieStruct) CommitPhaseOneInstance(serie *models.Serie) (Error error) {

	// check if the serie is not commited yet
	if _, ok := (*backRepoSerie.Map_SeriePtr_SerieDBID)[serie]; ok {
		return
	}

	// initiate serie
	var serieDB SerieDB
	serieDB.CopyBasicFieldsFromSerie(serie)

	query := backRepoSerie.db.Create(&serieDB)
	if query.Error != nil {
		return query.Error
	}

	// update stores
	(*backRepoSerie.Map_SeriePtr_SerieDBID)[serie] = serieDB.ID
	(*backRepoSerie.Map_SerieDBID_SeriePtr)[serieDB.ID] = serie
	(*backRepoSerie.Map_SerieDBID_SerieDB)[serieDB.ID] = &serieDB

	return
}

// BackRepoSerie.CommitPhaseTwo commits all staged instances of Serie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSerie *BackRepoSerieStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, serie := range *backRepoSerie.Map_SerieDBID_SeriePtr {
		backRepoSerie.CommitPhaseTwoInstance(backRepo, idx, serie)
	}

	return
}

// BackRepoSerie.CommitPhaseTwoInstance commits {{structname }} of models.Serie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSerie *BackRepoSerieStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, serie *models.Serie) (Error error) {

	// fetch matching serieDB
	if serieDB, ok := (*backRepoSerie.Map_SerieDBID_SerieDB)[idx]; ok {

		serieDB.CopyBasicFieldsFromSerie(serie)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value serie.Key translates to updating the serie.KeyID
		serieDB.KeyID.Valid = true // allow for a 0 value (nil association)
		if serie.Key != nil {
			if KeyId, ok := (*backRepo.BackRepoKey.Map_KeyPtr_KeyDBID)[serie.Key]; ok {
				serieDB.KeyID.Int64 = int64(KeyId)
				serieDB.KeyID.Valid = true
			}
		}

		// This loop encodes the slice of pointers serie.Values into the back repo.
		// Each back repo instance at the end of the association encode the ID of the association start
		// into a dedicated field for coding the association. The back repo instance is then saved to the db
		for idx, valueAssocEnd := range serie.Values {

			// get the back repo instance at the association end
			valueAssocEnd_DB :=
				backRepo.BackRepoValue.GetValueDBFromValuePtr(valueAssocEnd)

			// encode reverse pointer in the association end back repo instance
			valueAssocEnd_DB.Serie_ValuesDBID.Int64 = int64(serieDB.ID)
			valueAssocEnd_DB.Serie_ValuesDBID.Valid = true
			valueAssocEnd_DB.Serie_ValuesDBID_Index.Int64 = int64(idx)
			valueAssocEnd_DB.Serie_ValuesDBID_Index.Valid = true
			if q := backRepoSerie.db.Save(valueAssocEnd_DB); q.Error != nil {
				return q.Error
			}
		}

		query := backRepoSerie.db.Save(&serieDB)
		if query.Error != nil {
			return query.Error
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Serie intance %s", serie.Name))
		return err
	}

	return
}

// BackRepoSerie.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for pahse two)
//
func (backRepoSerie *BackRepoSerieStruct) CheckoutPhaseOne() (Error error) {

	serieDBArray := make([]SerieDB, 0)
	query := backRepoSerie.db.Find(&serieDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	serieInstancesToBeRemovedFromTheStage := make(map[*models.Serie]any)
	for key, value := range models.Stage.Series {
		serieInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, serieDB := range serieDBArray {
		backRepoSerie.CheckoutPhaseOneInstance(&serieDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		serie, ok := (*backRepoSerie.Map_SerieDBID_SeriePtr)[serieDB.ID]
		if ok {
			delete(serieInstancesToBeRemovedFromTheStage, serie)
		}
	}

	// remove from stage and back repo's 3 maps all series that are not in the checkout
	for serie := range serieInstancesToBeRemovedFromTheStage {
		serie.Unstage()

		// remove instance from the back repo 3 maps
		serieID := (*backRepoSerie.Map_SeriePtr_SerieDBID)[serie]
		delete((*backRepoSerie.Map_SeriePtr_SerieDBID), serie)
		delete((*backRepoSerie.Map_SerieDBID_SerieDB), serieID)
		delete((*backRepoSerie.Map_SerieDBID_SeriePtr), serieID)
	}

	return
}

// CheckoutPhaseOneInstance takes a serieDB that has been found in the DB, updates the backRepo and stages the
// models version of the serieDB
func (backRepoSerie *BackRepoSerieStruct) CheckoutPhaseOneInstance(serieDB *SerieDB) (Error error) {

	serie, ok := (*backRepoSerie.Map_SerieDBID_SeriePtr)[serieDB.ID]
	if !ok {
		serie = new(models.Serie)

		(*backRepoSerie.Map_SerieDBID_SeriePtr)[serieDB.ID] = serie
		(*backRepoSerie.Map_SeriePtr_SerieDBID)[serie] = serieDB.ID

		// append model store with the new element
		serie.Name = serieDB.Name_Data.String
		serie.Stage()
	}
	serieDB.CopyBasicFieldsToSerie(serie)

	// preserve pointer to serieDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_SerieDBID_SerieDB)[serieDB hold variable pointers
	serieDB_Data := *serieDB
	preservedPtrToSerie := &serieDB_Data
	(*backRepoSerie.Map_SerieDBID_SerieDB)[serieDB.ID] = preservedPtrToSerie

	return
}

// BackRepoSerie.CheckoutPhaseTwo Checkouts all staged instances of Serie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSerie *BackRepoSerieStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, serieDB := range *backRepoSerie.Map_SerieDBID_SerieDB {
		backRepoSerie.CheckoutPhaseTwoInstance(backRepo, serieDB)
	}
	return
}

// BackRepoSerie.CheckoutPhaseTwoInstance Checkouts staged instances of Serie to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoSerie *BackRepoSerieStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, serieDB *SerieDB) (Error error) {

	serie := (*backRepoSerie.Map_SerieDBID_SeriePtr)[serieDB.ID]
	_ = serie // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	// Key field
	if serieDB.KeyID.Int64 != 0 {
		serie.Key = (*backRepo.BackRepoKey.Map_KeyDBID_KeyPtr)[uint(serieDB.KeyID.Int64)]
	}
	// This loop redeem serie.Values in the stage from the encode in the back repo
	// It parses all ValueDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	serie.Values = serie.Values[:0]
	// 2. loop all instances in the type in the association end
	for _, valueDB_AssocEnd := range *backRepo.BackRepoValue.Map_ValueDBID_ValueDB {
		// 3. Does the ID encoding at the end and the ID at the start matches ?
		if valueDB_AssocEnd.Serie_ValuesDBID.Int64 == int64(serieDB.ID) {
			// 4. fetch the associated instance in the stage
			value_AssocEnd := (*backRepo.BackRepoValue.Map_ValueDBID_ValuePtr)[valueDB_AssocEnd.ID]
			// 5. append it the association slice
			serie.Values = append(serie.Values, value_AssocEnd)
		}
	}

	// sort the array according to the order
	sort.Slice(serie.Values, func(i, j int) bool {
		valueDB_i_ID := (*backRepo.BackRepoValue.Map_ValuePtr_ValueDBID)[serie.Values[i]]
		valueDB_j_ID := (*backRepo.BackRepoValue.Map_ValuePtr_ValueDBID)[serie.Values[j]]

		valueDB_i := (*backRepo.BackRepoValue.Map_ValueDBID_ValueDB)[valueDB_i_ID]
		valueDB_j := (*backRepo.BackRepoValue.Map_ValueDBID_ValueDB)[valueDB_j_ID]

		return valueDB_i.Serie_ValuesDBID_Index.Int64 < valueDB_j.Serie_ValuesDBID_Index.Int64
	})

	return
}

// CommitSerie allows commit of a single serie (if already staged)
func (backRepo *BackRepoStruct) CommitSerie(serie *models.Serie) {
	backRepo.BackRepoSerie.CommitPhaseOneInstance(serie)
	if id, ok := (*backRepo.BackRepoSerie.Map_SeriePtr_SerieDBID)[serie]; ok {
		backRepo.BackRepoSerie.CommitPhaseTwoInstance(backRepo, id, serie)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitSerie allows checkout of a single serie (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutSerie(serie *models.Serie) {
	// check if the serie is staged
	if _, ok := (*backRepo.BackRepoSerie.Map_SeriePtr_SerieDBID)[serie]; ok {

		if id, ok := (*backRepo.BackRepoSerie.Map_SeriePtr_SerieDBID)[serie]; ok {
			var serieDB SerieDB
			serieDB.ID = id

			if err := backRepo.BackRepoSerie.db.First(&serieDB, id).Error; err != nil {
				log.Panicln("CheckoutSerie : Problem with getting object with id:", id)
			}
			backRepo.BackRepoSerie.CheckoutPhaseOneInstance(&serieDB)
			backRepo.BackRepoSerie.CheckoutPhaseTwoInstance(backRepo, &serieDB)
		}
	}
}

// CopyBasicFieldsFromSerie
func (serieDB *SerieDB) CopyBasicFieldsFromSerie(serie *models.Serie) {
	// insertion point for fields commit

	serieDB.Name_Data.String = serie.Name
	serieDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromSerieWOP
func (serieDB *SerieDB) CopyBasicFieldsFromSerieWOP(serie *SerieWOP) {
	// insertion point for fields commit

	serieDB.Name_Data.String = serie.Name
	serieDB.Name_Data.Valid = true
}

// CopyBasicFieldsToSerie
func (serieDB *SerieDB) CopyBasicFieldsToSerie(serie *models.Serie) {
	// insertion point for checkout of basic fields (back repo to stage)
	serie.Name = serieDB.Name_Data.String
}

// CopyBasicFieldsToSerieWOP
func (serieDB *SerieDB) CopyBasicFieldsToSerieWOP(serie *SerieWOP) {
	serie.ID = int(serieDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	serie.Name = serieDB.Name_Data.String
}

// Backup generates a json file from a slice of all SerieDB instances in the backrepo
func (backRepoSerie *BackRepoSerieStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "SerieDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SerieDB, 0)
	for _, serieDB := range *backRepoSerie.Map_SerieDBID_SerieDB {
		forBackup = append(forBackup, serieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Panic("Cannot json Serie ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Panic("Cannot write the json Serie file", err.Error())
	}
}

// Backup generates a json file from a slice of all SerieDB instances in the backrepo
func (backRepoSerie *BackRepoSerieStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*SerieDB, 0)
	for _, serieDB := range *backRepoSerie.Map_SerieDBID_SerieDB {
		forBackup = append(forBackup, serieDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Serie")
	if err != nil {
		log.Panic("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Serie_Fields, -1)
	for _, serieDB := range forBackup {

		var serieWOP SerieWOP
		serieDB.CopyBasicFieldsToSerieWOP(&serieWOP)

		row := sh.AddRow()
		row.WriteStruct(&serieWOP, -1)
	}
}

// RestoreXL from the "Serie" sheet all SerieDB instances
func (backRepoSerie *BackRepoSerieStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoSerieid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Serie"]
	_ = sh
	if !ok {
		log.Panic(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoSerie.rowVisitorSerie)
	if err != nil {
		log.Panic("Err=", err)
	}
}

func (backRepoSerie *BackRepoSerieStruct) rowVisitorSerie(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var serieWOP SerieWOP
		row.ReadStruct(&serieWOP)

		// add the unmarshalled struct to the stage
		serieDB := new(SerieDB)
		serieDB.CopyBasicFieldsFromSerieWOP(&serieWOP)

		serieDB_ID_atBackupTime := serieDB.ID
		serieDB.ID = 0
		query := backRepoSerie.db.Create(serieDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSerie.Map_SerieDBID_SerieDB)[serieDB.ID] = serieDB
		BackRepoSerieid_atBckpTime_newID[serieDB_ID_atBackupTime] = serieDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "SerieDB.json" in dirPath that stores an array
// of SerieDB and stores it in the database
// the map BackRepoSerieid_atBckpTime_newID is updated accordingly
func (backRepoSerie *BackRepoSerieStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoSerieid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "SerieDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Panic("Cannot restore/open the json Serie file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*SerieDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_SerieDBID_SerieDB
	for _, serieDB := range forRestore {

		serieDB_ID_atBackupTime := serieDB.ID
		serieDB.ID = 0
		query := backRepoSerie.db.Create(serieDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
		(*backRepoSerie.Map_SerieDBID_SerieDB)[serieDB.ID] = serieDB
		BackRepoSerieid_atBckpTime_newID[serieDB_ID_atBackupTime] = serieDB.ID
	}

	if err != nil {
		log.Panic("Cannot restore/unmarshall json Serie file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Serie>id_atBckpTime_newID
// to compute new index
func (backRepoSerie *BackRepoSerieStruct) RestorePhaseTwo() {

	for _, serieDB := range *backRepoSerie.Map_SerieDBID_SerieDB {

		// next line of code is to avert unused variable compilation error
		_ = serieDB

		// insertion point for reindexing pointers encoding
		// reindexing Key field
		if serieDB.KeyID.Int64 != 0 {
			serieDB.KeyID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(serieDB.KeyID.Int64)])
			serieDB.KeyID.Valid = true
		}

		// This reindex serie.Set
		if serieDB.Bar_SetDBID.Int64 != 0 {
			serieDB.Bar_SetDBID.Int64 =
				int64(BackRepoBarid_atBckpTime_newID[uint(serieDB.Bar_SetDBID.Int64)])
		}

		// This reindex serie.Set
		if serieDB.Pie_SetDBID.Int64 != 0 {
			serieDB.Pie_SetDBID.Int64 =
				int64(BackRepoPieid_atBckpTime_newID[uint(serieDB.Pie_SetDBID.Int64)])
		}

		// This reindex serie.Set
		if serieDB.Scatter_SetDBID.Int64 != 0 {
			serieDB.Scatter_SetDBID.Int64 =
				int64(BackRepoScatterid_atBckpTime_newID[uint(serieDB.Scatter_SetDBID.Int64)])
		}

		// update databse with new index encoding
		query := backRepoSerie.db.Model(serieDB).Updates(*serieDB)
		if query.Error != nil {
			log.Panic(query.Error)
		}
	}

}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoSerieid_atBckpTime_newID map[uint]uint
