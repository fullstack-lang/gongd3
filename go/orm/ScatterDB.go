// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongd3/go/db"
	"github.com/fullstack-lang/gongd3/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Scatter_sql sql.NullBool
var dummy_Scatter_time time.Duration
var dummy_Scatter_sort sort.Float64Slice

// ScatterAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model scatterAPI
type ScatterAPI struct {
	gorm.Model

	models.Scatter_WOP

	// encoding of pointers
	// for API, it cannot be embedded
	ScatterPointersEncoding ScatterPointersEncoding
}

// ScatterPointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ScatterPointersEncoding struct {
	// insertion for pointer fields encoding declaration

	// field X is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	XID sql.NullInt64

	// field Y is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	YID sql.NullInt64

	// field Text is a pointer to another Struct (optional or 0..1)
	// This field is generated into another field to enable AS ONE association
	TextID sql.NullInt64

	// field Set is a slice of pointers to another Struct (optional or 0..1)
	Set IntSlice `gorm:"type:TEXT"`
}

// ScatterDB describes a scatter in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model scatterDB
type ScatterDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field scatterDB.Name
	Name_Data sql.NullString

	// Declation for basic field scatterDB.Width
	Width_Data sql.NullFloat64

	// Declation for basic field scatterDB.Heigth
	Heigth_Data sql.NullFloat64

	// Declation for basic field scatterDB.Margin
	Margin_Data sql.NullFloat64

	// encoding of pointers
	// for GORM serialization, it is necessary to embed to Pointer Encoding declaration
	ScatterPointersEncoding
}

// ScatterDBs arrays scatterDBs
// swagger:response scatterDBsResponse
type ScatterDBs []ScatterDB

// ScatterDBResponse provides response
// swagger:response scatterDBResponse
type ScatterDBResponse struct {
	ScatterDB
}

// ScatterWOP is a Scatter without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ScatterWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`

	Width float64 `xlsx:"2"`

	Heigth float64 `xlsx:"3"`

	Margin float64 `xlsx:"4"`
	// insertion for WOP pointer fields
}

var Scatter_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
	"Width",
	"Heigth",
	"Margin",
}

type BackRepoScatterStruct struct {
	// stores ScatterDB according to their gorm ID
	Map_ScatterDBID_ScatterDB map[uint]*ScatterDB

	// stores ScatterDB ID according to Scatter address
	Map_ScatterPtr_ScatterDBID map[*models.Scatter]uint

	// stores Scatter according to their gorm ID
	Map_ScatterDBID_ScatterPtr map[uint]*models.Scatter

	db db.DBInterface

	stage *models.StageStruct
}

func (backRepoScatter *BackRepoScatterStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoScatter.stage
	return
}

func (backRepoScatter *BackRepoScatterStruct) GetDB() db.DBInterface {
	return backRepoScatter.db
}

// GetScatterDBFromScatterPtr is a handy function to access the back repo instance from the stage instance
func (backRepoScatter *BackRepoScatterStruct) GetScatterDBFromScatterPtr(scatter *models.Scatter) (scatterDB *ScatterDB) {
	id := backRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]
	scatterDB = backRepoScatter.Map_ScatterDBID_ScatterDB[id]
	return
}

// BackRepoScatter.CommitPhaseOne commits all staged instances of Scatter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScatter *BackRepoScatterStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for scatter := range stage.Scatters {
		backRepoScatter.CommitPhaseOneInstance(scatter)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, scatter := range backRepoScatter.Map_ScatterDBID_ScatterPtr {
		if _, ok := stage.Scatters[scatter]; !ok {
			backRepoScatter.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoScatter.CommitDeleteInstance commits deletion of Scatter to the BackRepo
func (backRepoScatter *BackRepoScatterStruct) CommitDeleteInstance(id uint) (Error error) {

	scatter := backRepoScatter.Map_ScatterDBID_ScatterPtr[id]

	// scatter is not staged anymore, remove scatterDB
	scatterDB := backRepoScatter.Map_ScatterDBID_ScatterDB[id]
	db, _ := backRepoScatter.db.Unscoped()
	_, err := db.Delete(scatterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	delete(backRepoScatter.Map_ScatterPtr_ScatterDBID, scatter)
	delete(backRepoScatter.Map_ScatterDBID_ScatterPtr, id)
	delete(backRepoScatter.Map_ScatterDBID_ScatterDB, id)

	return
}

// BackRepoScatter.CommitPhaseOneInstance commits scatter staged instances of Scatter to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoScatter *BackRepoScatterStruct) CommitPhaseOneInstance(scatter *models.Scatter) (Error error) {

	// check if the scatter is not commited yet
	if _, ok := backRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]; ok {
		return
	}

	// initiate scatter
	var scatterDB ScatterDB
	scatterDB.CopyBasicFieldsFromScatter(scatter)

	_, err := backRepoScatter.db.Create(&scatterDB)
	if err != nil {
		log.Fatal(err)
	}

	// update stores
	backRepoScatter.Map_ScatterPtr_ScatterDBID[scatter] = scatterDB.ID
	backRepoScatter.Map_ScatterDBID_ScatterPtr[scatterDB.ID] = scatter
	backRepoScatter.Map_ScatterDBID_ScatterDB[scatterDB.ID] = &scatterDB

	return
}

// BackRepoScatter.CommitPhaseTwo commits all staged instances of Scatter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScatter *BackRepoScatterStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, scatter := range backRepoScatter.Map_ScatterDBID_ScatterPtr {
		backRepoScatter.CommitPhaseTwoInstance(backRepo, idx, scatter)
	}

	return
}

// BackRepoScatter.CommitPhaseTwoInstance commits {{structname }} of models.Scatter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScatter *BackRepoScatterStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, scatter *models.Scatter) (Error error) {

	// fetch matching scatterDB
	if scatterDB, ok := backRepoScatter.Map_ScatterDBID_ScatterDB[idx]; ok {

		scatterDB.CopyBasicFieldsFromScatter(scatter)

		// insertion point for translating pointers encodings into actual pointers
		// commit pointer value scatter.X translates to updating the scatter.XID
		scatterDB.XID.Valid = true // allow for a 0 value (nil association)
		if scatter.X != nil {
			if XId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[scatter.X]; ok {
				scatterDB.XID.Int64 = int64(XId)
				scatterDB.XID.Valid = true
			}
		} else {
			scatterDB.XID.Int64 = 0
			scatterDB.XID.Valid = true
		}

		// commit pointer value scatter.Y translates to updating the scatter.YID
		scatterDB.YID.Valid = true // allow for a 0 value (nil association)
		if scatter.Y != nil {
			if YId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[scatter.Y]; ok {
				scatterDB.YID.Int64 = int64(YId)
				scatterDB.YID.Valid = true
			}
		} else {
			scatterDB.YID.Int64 = 0
			scatterDB.YID.Valid = true
		}

		// commit pointer value scatter.Text translates to updating the scatter.TextID
		scatterDB.TextID.Valid = true // allow for a 0 value (nil association)
		if scatter.Text != nil {
			if TextId, ok := backRepo.BackRepoKey.Map_KeyPtr_KeyDBID[scatter.Text]; ok {
				scatterDB.TextID.Int64 = int64(TextId)
				scatterDB.TextID.Valid = true
			}
		} else {
			scatterDB.TextID.Int64 = 0
			scatterDB.TextID.Valid = true
		}

		// 1. reset
		scatterDB.ScatterPointersEncoding.Set = make([]int, 0)
		// 2. encode
		for _, serieAssocEnd := range scatter.Set {
			serieAssocEnd_DB :=
				backRepo.BackRepoSerie.GetSerieDBFromSeriePtr(serieAssocEnd)
			
			// the stage might be inconsistant, meaning that the serieAssocEnd_DB might
			// be missing from the stage. In this case, the commit operation is robust
			// An alternative would be to crash here to reveal the missing element.
			if serieAssocEnd_DB == nil {
				continue
			}
			
			scatterDB.ScatterPointersEncoding.Set =
				append(scatterDB.ScatterPointersEncoding.Set, int(serieAssocEnd_DB.ID))
		}

		_, err := backRepoScatter.db.Save(scatterDB)
		if err != nil {
			log.Fatal(err)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Scatter intance %s", scatter.Name))
		return err
	}

	return
}

// BackRepoScatter.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoScatter *BackRepoScatterStruct) CheckoutPhaseOne() (Error error) {

	scatterDBArray := make([]ScatterDB, 0)
	_, err := backRepoScatter.db.Find(&scatterDBArray)
	if err != nil {
		return err
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	scatterInstancesToBeRemovedFromTheStage := make(map[*models.Scatter]any)
	for key, value := range backRepoScatter.stage.Scatters {
		scatterInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, scatterDB := range scatterDBArray {
		backRepoScatter.CheckoutPhaseOneInstance(&scatterDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		scatter, ok := backRepoScatter.Map_ScatterDBID_ScatterPtr[scatterDB.ID]
		if ok {
			delete(scatterInstancesToBeRemovedFromTheStage, scatter)
		}
	}

	// remove from stage and back repo's 3 maps all scatters that are not in the checkout
	for scatter := range scatterInstancesToBeRemovedFromTheStage {
		scatter.Unstage(backRepoScatter.GetStage())

		// remove instance from the back repo 3 maps
		scatterID := backRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]
		delete(backRepoScatter.Map_ScatterPtr_ScatterDBID, scatter)
		delete(backRepoScatter.Map_ScatterDBID_ScatterDB, scatterID)
		delete(backRepoScatter.Map_ScatterDBID_ScatterPtr, scatterID)
	}

	return
}

// CheckoutPhaseOneInstance takes a scatterDB that has been found in the DB, updates the backRepo and stages the
// models version of the scatterDB
func (backRepoScatter *BackRepoScatterStruct) CheckoutPhaseOneInstance(scatterDB *ScatterDB) (Error error) {

	scatter, ok := backRepoScatter.Map_ScatterDBID_ScatterPtr[scatterDB.ID]
	if !ok {
		scatter = new(models.Scatter)

		backRepoScatter.Map_ScatterDBID_ScatterPtr[scatterDB.ID] = scatter
		backRepoScatter.Map_ScatterPtr_ScatterDBID[scatter] = scatterDB.ID

		// append model store with the new element
		scatter.Name = scatterDB.Name_Data.String
		scatter.Stage(backRepoScatter.GetStage())
	}
	scatterDB.CopyBasicFieldsToScatter(scatter)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	scatter.Stage(backRepoScatter.GetStage())

	// preserve pointer to scatterDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ScatterDBID_ScatterDB)[scatterDB hold variable pointers
	scatterDB_Data := *scatterDB
	preservedPtrToScatter := &scatterDB_Data
	backRepoScatter.Map_ScatterDBID_ScatterDB[scatterDB.ID] = preservedPtrToScatter

	return
}

// BackRepoScatter.CheckoutPhaseTwo Checkouts all staged instances of Scatter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScatter *BackRepoScatterStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, scatterDB := range backRepoScatter.Map_ScatterDBID_ScatterDB {
		backRepoScatter.CheckoutPhaseTwoInstance(backRepo, scatterDB)
	}
	return
}

// BackRepoScatter.CheckoutPhaseTwoInstance Checkouts staged instances of Scatter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScatter *BackRepoScatterStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, scatterDB *ScatterDB) (Error error) {

	scatter := backRepoScatter.Map_ScatterDBID_ScatterPtr[scatterDB.ID]

	scatterDB.DecodePointers(backRepo, scatter)

	return
}

func (scatterDB *ScatterDB) DecodePointers(backRepo *BackRepoStruct, scatter *models.Scatter) {

	// insertion point for checkout of pointer encoding
	// X field
	scatter.X = nil
	if scatterDB.XID.Int64 != 0 {
		scatter.X = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(scatterDB.XID.Int64)]
	}
	// Y field
	scatter.Y = nil
	if scatterDB.YID.Int64 != 0 {
		scatter.Y = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(scatterDB.YID.Int64)]
	}
	// Text field
	scatter.Text = nil
	if scatterDB.TextID.Int64 != 0 {
		scatter.Text = backRepo.BackRepoKey.Map_KeyDBID_KeyPtr[uint(scatterDB.TextID.Int64)]
	}
	// This loop redeem scatter.Set in the stage from the encode in the back repo
	// It parses all SerieDB in the back repo and if the reverse pointer encoding matches the back repo ID
	// it appends the stage instance
	// 1. reset the slice
	scatter.Set = scatter.Set[:0]
	for _, _Serieid := range scatterDB.ScatterPointersEncoding.Set {
		scatter.Set = append(scatter.Set, backRepo.BackRepoSerie.Map_SerieDBID_SeriePtr[uint(_Serieid)])
	}

	return
}

// CommitScatter allows commit of a single scatter (if already staged)
func (backRepo *BackRepoStruct) CommitScatter(scatter *models.Scatter) {
	backRepo.BackRepoScatter.CommitPhaseOneInstance(scatter)
	if id, ok := backRepo.BackRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]; ok {
		backRepo.BackRepoScatter.CommitPhaseTwoInstance(backRepo, id, scatter)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitScatter allows checkout of a single scatter (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutScatter(scatter *models.Scatter) {
	// check if the scatter is staged
	if _, ok := backRepo.BackRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]; ok {

		if id, ok := backRepo.BackRepoScatter.Map_ScatterPtr_ScatterDBID[scatter]; ok {
			var scatterDB ScatterDB
			scatterDB.ID = id

			if _, err := backRepo.BackRepoScatter.db.First(&scatterDB, id); err != nil {
				log.Fatalln("CheckoutScatter : Problem with getting object with id:", id)
			}
			backRepo.BackRepoScatter.CheckoutPhaseOneInstance(&scatterDB)
			backRepo.BackRepoScatter.CheckoutPhaseTwoInstance(backRepo, &scatterDB)
		}
	}
}

// CopyBasicFieldsFromScatter
func (scatterDB *ScatterDB) CopyBasicFieldsFromScatter(scatter *models.Scatter) {
	// insertion point for fields commit

	scatterDB.Name_Data.String = scatter.Name
	scatterDB.Name_Data.Valid = true

	scatterDB.Width_Data.Float64 = scatter.Width
	scatterDB.Width_Data.Valid = true

	scatterDB.Heigth_Data.Float64 = scatter.Heigth
	scatterDB.Heigth_Data.Valid = true

	scatterDB.Margin_Data.Float64 = scatter.Margin
	scatterDB.Margin_Data.Valid = true
}

// CopyBasicFieldsFromScatter_WOP
func (scatterDB *ScatterDB) CopyBasicFieldsFromScatter_WOP(scatter *models.Scatter_WOP) {
	// insertion point for fields commit

	scatterDB.Name_Data.String = scatter.Name
	scatterDB.Name_Data.Valid = true

	scatterDB.Width_Data.Float64 = scatter.Width
	scatterDB.Width_Data.Valid = true

	scatterDB.Heigth_Data.Float64 = scatter.Heigth
	scatterDB.Heigth_Data.Valid = true

	scatterDB.Margin_Data.Float64 = scatter.Margin
	scatterDB.Margin_Data.Valid = true
}

// CopyBasicFieldsFromScatterWOP
func (scatterDB *ScatterDB) CopyBasicFieldsFromScatterWOP(scatter *ScatterWOP) {
	// insertion point for fields commit

	scatterDB.Name_Data.String = scatter.Name
	scatterDB.Name_Data.Valid = true

	scatterDB.Width_Data.Float64 = scatter.Width
	scatterDB.Width_Data.Valid = true

	scatterDB.Heigth_Data.Float64 = scatter.Heigth
	scatterDB.Heigth_Data.Valid = true

	scatterDB.Margin_Data.Float64 = scatter.Margin
	scatterDB.Margin_Data.Valid = true
}

// CopyBasicFieldsToScatter
func (scatterDB *ScatterDB) CopyBasicFieldsToScatter(scatter *models.Scatter) {
	// insertion point for checkout of basic fields (back repo to stage)
	scatter.Name = scatterDB.Name_Data.String
	scatter.Width = scatterDB.Width_Data.Float64
	scatter.Heigth = scatterDB.Heigth_Data.Float64
	scatter.Margin = scatterDB.Margin_Data.Float64
}

// CopyBasicFieldsToScatter_WOP
func (scatterDB *ScatterDB) CopyBasicFieldsToScatter_WOP(scatter *models.Scatter_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	scatter.Name = scatterDB.Name_Data.String
	scatter.Width = scatterDB.Width_Data.Float64
	scatter.Heigth = scatterDB.Heigth_Data.Float64
	scatter.Margin = scatterDB.Margin_Data.Float64
}

// CopyBasicFieldsToScatterWOP
func (scatterDB *ScatterDB) CopyBasicFieldsToScatterWOP(scatter *ScatterWOP) {
	scatter.ID = int(scatterDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	scatter.Name = scatterDB.Name_Data.String
	scatter.Width = scatterDB.Width_Data.Float64
	scatter.Heigth = scatterDB.Heigth_Data.Float64
	scatter.Margin = scatterDB.Margin_Data.Float64
}

// Backup generates a json file from a slice of all ScatterDB instances in the backrepo
func (backRepoScatter *BackRepoScatterStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ScatterDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScatterDB, 0)
	for _, scatterDB := range backRepoScatter.Map_ScatterDBID_ScatterDB {
		forBackup = append(forBackup, scatterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Scatter ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Scatter file", err.Error())
	}
}

// Backup generates a json file from a slice of all ScatterDB instances in the backrepo
func (backRepoScatter *BackRepoScatterStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ScatterDB, 0)
	for _, scatterDB := range backRepoScatter.Map_ScatterDBID_ScatterDB {
		forBackup = append(forBackup, scatterDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Scatter")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Scatter_Fields, -1)
	for _, scatterDB := range forBackup {

		var scatterWOP ScatterWOP
		scatterDB.CopyBasicFieldsToScatterWOP(&scatterWOP)

		row := sh.AddRow()
		row.WriteStruct(&scatterWOP, -1)
	}
}

// RestoreXL from the "Scatter" sheet all ScatterDB instances
func (backRepoScatter *BackRepoScatterStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoScatterid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Scatter"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoScatter.rowVisitorScatter)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoScatter *BackRepoScatterStruct) rowVisitorScatter(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var scatterWOP ScatterWOP
		row.ReadStruct(&scatterWOP)

		// add the unmarshalled struct to the stage
		scatterDB := new(ScatterDB)
		scatterDB.CopyBasicFieldsFromScatterWOP(&scatterWOP)

		scatterDB_ID_atBackupTime := scatterDB.ID
		scatterDB.ID = 0
		_, err := backRepoScatter.db.Create(scatterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoScatter.Map_ScatterDBID_ScatterDB[scatterDB.ID] = scatterDB
		BackRepoScatterid_atBckpTime_newID[scatterDB_ID_atBackupTime] = scatterDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ScatterDB.json" in dirPath that stores an array
// of ScatterDB and stores it in the database
// the map BackRepoScatterid_atBckpTime_newID is updated accordingly
func (backRepoScatter *BackRepoScatterStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoScatterid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ScatterDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Scatter file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ScatterDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ScatterDBID_ScatterDB
	for _, scatterDB := range forRestore {

		scatterDB_ID_atBackupTime := scatterDB.ID
		scatterDB.ID = 0
		_, err := backRepoScatter.db.Create(scatterDB)
		if err != nil {
			log.Fatal(err)
		}
		backRepoScatter.Map_ScatterDBID_ScatterDB[scatterDB.ID] = scatterDB
		BackRepoScatterid_atBckpTime_newID[scatterDB_ID_atBackupTime] = scatterDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Scatter file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Scatter>id_atBckpTime_newID
// to compute new index
func (backRepoScatter *BackRepoScatterStruct) RestorePhaseTwo() {

	for _, scatterDB := range backRepoScatter.Map_ScatterDBID_ScatterDB {

		// next line of code is to avert unused variable compilation error
		_ = scatterDB

		// insertion point for reindexing pointers encoding
		// reindexing X field
		if scatterDB.XID.Int64 != 0 {
			scatterDB.XID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(scatterDB.XID.Int64)])
			scatterDB.XID.Valid = true
		}

		// reindexing Y field
		if scatterDB.YID.Int64 != 0 {
			scatterDB.YID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(scatterDB.YID.Int64)])
			scatterDB.YID.Valid = true
		}

		// reindexing Text field
		if scatterDB.TextID.Int64 != 0 {
			scatterDB.TextID.Int64 = int64(BackRepoKeyid_atBckpTime_newID[uint(scatterDB.TextID.Int64)])
			scatterDB.TextID.Valid = true
		}

		// update databse with new index encoding
		db, _ := backRepoScatter.db.Model(scatterDB)
		_, err := db.Updates(*scatterDB)
		if err != nil {
			log.Fatal(err)
		}
	}

}

// BackRepoScatter.ResetReversePointers commits all staged instances of Scatter to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoScatter *BackRepoScatterStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, scatter := range backRepoScatter.Map_ScatterDBID_ScatterPtr {
		backRepoScatter.ResetReversePointersInstance(backRepo, idx, scatter)
	}

	return
}

func (backRepoScatter *BackRepoScatterStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, scatter *models.Scatter) (Error error) {

	// fetch matching scatterDB
	if scatterDB, ok := backRepoScatter.Map_ScatterDBID_ScatterDB[idx]; ok {
		_ = scatterDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoScatterid_atBckpTime_newID map[uint]uint
