// generated by stacks/gong/go/models/orm_file_per_struct_back_repo.go
package orm

import (
	"database/sql"
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"time"

	"gorm.io/gorm"

	"github.com/tealeg/xlsx/v3"

	"github.com/fullstack-lang/gongd3/go/models"
)

// dummy variable to have the import declaration wihthout compile failure (even if no code needing this import is generated)
var dummy_Value_sql sql.NullBool
var dummy_Value_time time.Duration
var dummy_Value_sort sort.Float64Slice

// ValueAPI is the input in POST API
//
// for POST, API, one needs the fields of the model as well as the fields
// from associations ("Has One" and "Has Many") that are generated to
// fullfill the ORM requirements for associations
//
// swagger:model valueAPI
type ValueAPI struct {
	gorm.Model

	models.Value_WOP

	// encoding of pointers
	ValuePointersEncoding ValuePointersEncoding
}

// ValuePointersEncoding encodes pointers to Struct and
// reverse pointers of slice of poitners to Struct
type ValuePointersEncoding struct {
	// insertion for pointer fields encoding declaration
}

// ValueDB describes a value in the database
//
// It incorporates the GORM ID, basic fields from the model (because they can be serialized),
// the encoded version of pointers
//
// swagger:model valueDB
type ValueDB struct {
	gorm.Model

	// insertion for basic fields declaration

	// Declation for basic field valueDB.Name
	Name_Data sql.NullString
	// encoding of pointers
	ValuePointersEncoding
}

// ValueDBs arrays valueDBs
// swagger:response valueDBsResponse
type ValueDBs []ValueDB

// ValueDBResponse provides response
// swagger:response valueDBResponse
type ValueDBResponse struct {
	ValueDB
}

// ValueWOP is a Value without pointers (WOP is an acronym for "Without Pointers")
// it holds the same basic fields but pointers are encoded into uint
type ValueWOP struct {
	ID int `xlsx:"0"`

	// insertion for WOP basic fields

	Name string `xlsx:"1"`
	// insertion for WOP pointer fields
}

var Value_Fields = []string{
	// insertion for WOP basic fields
	"ID",
	"Name",
}

type BackRepoValueStruct struct {
	// stores ValueDB according to their gorm ID
	Map_ValueDBID_ValueDB map[uint]*ValueDB

	// stores ValueDB ID according to Value address
	Map_ValuePtr_ValueDBID map[*models.Value]uint

	// stores Value according to their gorm ID
	Map_ValueDBID_ValuePtr map[uint]*models.Value

	db *gorm.DB

	stage *models.StageStruct
}

func (backRepoValue *BackRepoValueStruct) GetStage() (stage *models.StageStruct) {
	stage = backRepoValue.stage
	return
}

func (backRepoValue *BackRepoValueStruct) GetDB() *gorm.DB {
	return backRepoValue.db
}

// GetValueDBFromValuePtr is a handy function to access the back repo instance from the stage instance
func (backRepoValue *BackRepoValueStruct) GetValueDBFromValuePtr(value *models.Value) (valueDB *ValueDB) {
	id := backRepoValue.Map_ValuePtr_ValueDBID[value]
	valueDB = backRepoValue.Map_ValueDBID_ValueDB[id]
	return
}

// BackRepoValue.CommitPhaseOne commits all staged instances of Value to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoValue *BackRepoValueStruct) CommitPhaseOne(stage *models.StageStruct) (Error error) {

	for value := range stage.Values {
		backRepoValue.CommitPhaseOneInstance(value)
	}

	// parse all backRepo instance and checks wether some instance have been unstaged
	// in this case, remove them from the back repo
	for id, value := range backRepoValue.Map_ValueDBID_ValuePtr {
		if _, ok := stage.Values[value]; !ok {
			backRepoValue.CommitDeleteInstance(id)
		}
	}

	return
}

// BackRepoValue.CommitDeleteInstance commits deletion of Value to the BackRepo
func (backRepoValue *BackRepoValueStruct) CommitDeleteInstance(id uint) (Error error) {

	value := backRepoValue.Map_ValueDBID_ValuePtr[id]

	// value is not staged anymore, remove valueDB
	valueDB := backRepoValue.Map_ValueDBID_ValueDB[id]
	query := backRepoValue.db.Unscoped().Delete(&valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	delete(backRepoValue.Map_ValuePtr_ValueDBID, value)
	delete(backRepoValue.Map_ValueDBID_ValuePtr, id)
	delete(backRepoValue.Map_ValueDBID_ValueDB, id)

	return
}

// BackRepoValue.CommitPhaseOneInstance commits value staged instances of Value to the BackRepo
// Phase One is the creation of instance in the database if it is not yet done to get the unique ID for each staged instance
func (backRepoValue *BackRepoValueStruct) CommitPhaseOneInstance(value *models.Value) (Error error) {

	// check if the value is not commited yet
	if _, ok := backRepoValue.Map_ValuePtr_ValueDBID[value]; ok {
		return
	}

	// initiate value
	var valueDB ValueDB
	valueDB.CopyBasicFieldsFromValue(value)

	query := backRepoValue.db.Create(&valueDB)
	if query.Error != nil {
		log.Fatal(query.Error)
	}

	// update stores
	backRepoValue.Map_ValuePtr_ValueDBID[value] = valueDB.ID
	backRepoValue.Map_ValueDBID_ValuePtr[valueDB.ID] = value
	backRepoValue.Map_ValueDBID_ValueDB[valueDB.ID] = &valueDB

	return
}

// BackRepoValue.CommitPhaseTwo commits all staged instances of Value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoValue *BackRepoValueStruct) CommitPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	for idx, value := range backRepoValue.Map_ValueDBID_ValuePtr {
		backRepoValue.CommitPhaseTwoInstance(backRepo, idx, value)
	}

	return
}

// BackRepoValue.CommitPhaseTwoInstance commits {{structname }} of models.Value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoValue *BackRepoValueStruct) CommitPhaseTwoInstance(backRepo *BackRepoStruct, idx uint, value *models.Value) (Error error) {

	// fetch matching valueDB
	if valueDB, ok := backRepoValue.Map_ValueDBID_ValueDB[idx]; ok {

		valueDB.CopyBasicFieldsFromValue(value)

		// insertion point for translating pointers encodings into actual pointers
		query := backRepoValue.db.Save(&valueDB)
		if query.Error != nil {
			log.Fatalln(query.Error)
		}

	} else {
		err := errors.New(
			fmt.Sprintf("Unkown Value intance %s", value.Name))
		return err
	}

	return
}

// BackRepoValue.CheckoutPhaseOne Checkouts all BackRepo instances to the Stage
//
// Phase One will result in having instances on the stage aligned with the back repo
// pointers are not initialized yet (this is for phase two)
func (backRepoValue *BackRepoValueStruct) CheckoutPhaseOne() (Error error) {

	valueDBArray := make([]ValueDB, 0)
	query := backRepoValue.db.Find(&valueDBArray)
	if query.Error != nil {
		return query.Error
	}

	// list of instances to be removed
	// start from the initial map on the stage and remove instances that have been checked out
	valueInstancesToBeRemovedFromTheStage := make(map[*models.Value]any)
	for key, value := range backRepoValue.stage.Values {
		valueInstancesToBeRemovedFromTheStage[key] = value
	}

	// copy orm objects to the the map
	for _, valueDB := range valueDBArray {
		backRepoValue.CheckoutPhaseOneInstance(&valueDB)

		// do not remove this instance from the stage, therefore
		// remove instance from the list of instances to be be removed from the stage
		value, ok := backRepoValue.Map_ValueDBID_ValuePtr[valueDB.ID]
		if ok {
			delete(valueInstancesToBeRemovedFromTheStage, value)
		}
	}

	// remove from stage and back repo's 3 maps all values that are not in the checkout
	for value := range valueInstancesToBeRemovedFromTheStage {
		value.Unstage(backRepoValue.GetStage())

		// remove instance from the back repo 3 maps
		valueID := backRepoValue.Map_ValuePtr_ValueDBID[value]
		delete(backRepoValue.Map_ValuePtr_ValueDBID, value)
		delete(backRepoValue.Map_ValueDBID_ValueDB, valueID)
		delete(backRepoValue.Map_ValueDBID_ValuePtr, valueID)
	}

	return
}

// CheckoutPhaseOneInstance takes a valueDB that has been found in the DB, updates the backRepo and stages the
// models version of the valueDB
func (backRepoValue *BackRepoValueStruct) CheckoutPhaseOneInstance(valueDB *ValueDB) (Error error) {

	value, ok := backRepoValue.Map_ValueDBID_ValuePtr[valueDB.ID]
	if !ok {
		value = new(models.Value)

		backRepoValue.Map_ValueDBID_ValuePtr[valueDB.ID] = value
		backRepoValue.Map_ValuePtr_ValueDBID[value] = valueDB.ID

		// append model store with the new element
		value.Name = valueDB.Name_Data.String
		value.Stage(backRepoValue.GetStage())
	}
	valueDB.CopyBasicFieldsToValue(value)

	// in some cases, the instance might have been unstaged. It is necessary to stage it again
	value.Stage(backRepoValue.GetStage())

	// preserve pointer to valueDB. Otherwise, pointer will is recycled and the map of pointers
	// Map_ValueDBID_ValueDB)[valueDB hold variable pointers
	valueDB_Data := *valueDB
	preservedPtrToValue := &valueDB_Data
	backRepoValue.Map_ValueDBID_ValueDB[valueDB.ID] = preservedPtrToValue

	return
}

// BackRepoValue.CheckoutPhaseTwo Checkouts all staged instances of Value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoValue *BackRepoValueStruct) CheckoutPhaseTwo(backRepo *BackRepoStruct) (Error error) {

	// parse all DB instance and update all pointer fields of the translated models instance
	for _, valueDB := range backRepoValue.Map_ValueDBID_ValueDB {
		backRepoValue.CheckoutPhaseTwoInstance(backRepo, valueDB)
	}
	return
}

// BackRepoValue.CheckoutPhaseTwoInstance Checkouts staged instances of Value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoValue *BackRepoValueStruct) CheckoutPhaseTwoInstance(backRepo *BackRepoStruct, valueDB *ValueDB) (Error error) {

	value := backRepoValue.Map_ValueDBID_ValuePtr[valueDB.ID]
	_ = value // sometimes, there is no code generated. This lines voids the "unused variable" compilation error

	// insertion point for checkout of pointer encoding
	return
}

// CommitValue allows commit of a single value (if already staged)
func (backRepo *BackRepoStruct) CommitValue(value *models.Value) {
	backRepo.BackRepoValue.CommitPhaseOneInstance(value)
	if id, ok := backRepo.BackRepoValue.Map_ValuePtr_ValueDBID[value]; ok {
		backRepo.BackRepoValue.CommitPhaseTwoInstance(backRepo, id, value)
	}
	backRepo.CommitFromBackNb = backRepo.CommitFromBackNb + 1
}

// CommitValue allows checkout of a single value (if already staged and with a BackRepo id)
func (backRepo *BackRepoStruct) CheckoutValue(value *models.Value) {
	// check if the value is staged
	if _, ok := backRepo.BackRepoValue.Map_ValuePtr_ValueDBID[value]; ok {

		if id, ok := backRepo.BackRepoValue.Map_ValuePtr_ValueDBID[value]; ok {
			var valueDB ValueDB
			valueDB.ID = id

			if err := backRepo.BackRepoValue.db.First(&valueDB, id).Error; err != nil {
				log.Fatalln("CheckoutValue : Problem with getting object with id:", id)
			}
			backRepo.BackRepoValue.CheckoutPhaseOneInstance(&valueDB)
			backRepo.BackRepoValue.CheckoutPhaseTwoInstance(backRepo, &valueDB)
		}
	}
}

// CopyBasicFieldsFromValue
func (valueDB *ValueDB) CopyBasicFieldsFromValue(value *models.Value) {
	// insertion point for fields commit

	valueDB.Name_Data.String = value.Name
	valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromValue_WOP
func (valueDB *ValueDB) CopyBasicFieldsFromValue_WOP(value *models.Value_WOP) {
	// insertion point for fields commit

	valueDB.Name_Data.String = value.Name
	valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsFromValueWOP
func (valueDB *ValueDB) CopyBasicFieldsFromValueWOP(value *ValueWOP) {
	// insertion point for fields commit

	valueDB.Name_Data.String = value.Name
	valueDB.Name_Data.Valid = true
}

// CopyBasicFieldsToValue
func (valueDB *ValueDB) CopyBasicFieldsToValue(value *models.Value) {
	// insertion point for checkout of basic fields (back repo to stage)
	value.Name = valueDB.Name_Data.String
}

// CopyBasicFieldsToValue_WOP
func (valueDB *ValueDB) CopyBasicFieldsToValue_WOP(value *models.Value_WOP) {
	// insertion point for checkout of basic fields (back repo to stage)
	value.Name = valueDB.Name_Data.String
}

// CopyBasicFieldsToValueWOP
func (valueDB *ValueDB) CopyBasicFieldsToValueWOP(value *ValueWOP) {
	value.ID = int(valueDB.ID)
	// insertion point for checkout of basic fields (back repo to stage)
	value.Name = valueDB.Name_Data.String
}

// Backup generates a json file from a slice of all ValueDB instances in the backrepo
func (backRepoValue *BackRepoValueStruct) Backup(dirPath string) {

	filename := filepath.Join(dirPath, "ValueDB.json")

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ValueDB, 0)
	for _, valueDB := range backRepoValue.Map_ValueDBID_ValueDB {
		forBackup = append(forBackup, valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	file, err := json.MarshalIndent(forBackup, "", " ")

	if err != nil {
		log.Fatal("Cannot json Value ", filename, " ", err.Error())
	}

	err = ioutil.WriteFile(filename, file, 0644)
	if err != nil {
		log.Fatal("Cannot write the json Value file", err.Error())
	}
}

// Backup generates a json file from a slice of all ValueDB instances in the backrepo
func (backRepoValue *BackRepoValueStruct) BackupXL(file *xlsx.File) {

	// organize the map into an array with increasing IDs, in order to have repoductible
	// backup file
	forBackup := make([]*ValueDB, 0)
	for _, valueDB := range backRepoValue.Map_ValueDBID_ValueDB {
		forBackup = append(forBackup, valueDB)
	}

	sort.Slice(forBackup[:], func(i, j int) bool {
		return forBackup[i].ID < forBackup[j].ID
	})

	sh, err := file.AddSheet("Value")
	if err != nil {
		log.Fatal("Cannot add XL file", err.Error())
	}
	_ = sh

	row := sh.AddRow()
	row.WriteSlice(&Value_Fields, -1)
	for _, valueDB := range forBackup {

		var valueWOP ValueWOP
		valueDB.CopyBasicFieldsToValueWOP(&valueWOP)

		row := sh.AddRow()
		row.WriteStruct(&valueWOP, -1)
	}
}

// RestoreXL from the "Value" sheet all ValueDB instances
func (backRepoValue *BackRepoValueStruct) RestoreXLPhaseOne(file *xlsx.File) {

	// resets the map
	BackRepoValueid_atBckpTime_newID = make(map[uint]uint)

	sh, ok := file.Sheet["Value"]
	_ = sh
	if !ok {
		log.Fatal(errors.New("sheet not found"))
	}

	// log.Println("Max row is", sh.MaxRow)
	err := sh.ForEachRow(backRepoValue.rowVisitorValue)
	if err != nil {
		log.Fatal("Err=", err)
	}
}

func (backRepoValue *BackRepoValueStruct) rowVisitorValue(row *xlsx.Row) error {

	log.Printf("row line %d\n", row.GetCoordinate())
	log.Println(row)

	// skip first line
	if row.GetCoordinate() > 0 {
		var valueWOP ValueWOP
		row.ReadStruct(&valueWOP)

		// add the unmarshalled struct to the stage
		valueDB := new(ValueDB)
		valueDB.CopyBasicFieldsFromValueWOP(&valueWOP)

		valueDB_ID_atBackupTime := valueDB.ID
		valueDB.ID = 0
		query := backRepoValue.db.Create(valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoValue.Map_ValueDBID_ValueDB[valueDB.ID] = valueDB
		BackRepoValueid_atBckpTime_newID[valueDB_ID_atBackupTime] = valueDB.ID
	}
	return nil
}

// RestorePhaseOne read the file "ValueDB.json" in dirPath that stores an array
// of ValueDB and stores it in the database
// the map BackRepoValueid_atBckpTime_newID is updated accordingly
func (backRepoValue *BackRepoValueStruct) RestorePhaseOne(dirPath string) {

	// resets the map
	BackRepoValueid_atBckpTime_newID = make(map[uint]uint)

	filename := filepath.Join(dirPath, "ValueDB.json")
	jsonFile, err := os.Open(filename)
	// if we os.Open returns an error then handle it
	if err != nil {
		log.Fatal("Cannot restore/open the json Value file", filename, " ", err.Error())
	}

	// read our opened jsonFile as a byte array.
	byteValue, _ := ioutil.ReadAll(jsonFile)

	var forRestore []*ValueDB

	err = json.Unmarshal(byteValue, &forRestore)

	// fill up Map_ValueDBID_ValueDB
	for _, valueDB := range forRestore {

		valueDB_ID_atBackupTime := valueDB.ID
		valueDB.ID = 0
		query := backRepoValue.db.Create(valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
		backRepoValue.Map_ValueDBID_ValueDB[valueDB.ID] = valueDB
		BackRepoValueid_atBckpTime_newID[valueDB_ID_atBackupTime] = valueDB.ID
	}

	if err != nil {
		log.Fatal("Cannot restore/unmarshall json Value file", err.Error())
	}
}

// RestorePhaseTwo uses all map BackRepo<Value>id_atBckpTime_newID
// to compute new index
func (backRepoValue *BackRepoValueStruct) RestorePhaseTwo() {

	for _, valueDB := range backRepoValue.Map_ValueDBID_ValueDB {

		// next line of code is to avert unused variable compilation error
		_ = valueDB

		// insertion point for reindexing pointers encoding
		// update databse with new index encoding
		query := backRepoValue.db.Model(valueDB).Updates(*valueDB)
		if query.Error != nil {
			log.Fatal(query.Error)
		}
	}

}

// BackRepoValue.ResetReversePointers commits all staged instances of Value to the BackRepo
// Phase Two is the update of instance with the field in the database
func (backRepoValue *BackRepoValueStruct) ResetReversePointers(backRepo *BackRepoStruct) (Error error) {

	for idx, value := range backRepoValue.Map_ValueDBID_ValuePtr {
		backRepoValue.ResetReversePointersInstance(backRepo, idx, value)
	}

	return
}

func (backRepoValue *BackRepoValueStruct) ResetReversePointersInstance(backRepo *BackRepoStruct, idx uint, astruct *models.Value) (Error error) {

	// fetch matching valueDB
	if valueDB, ok := backRepoValue.Map_ValueDBID_ValueDB[idx]; ok {
		_ = valueDB // to avoid unused variable error if there are no reverse to reset

		// insertion point for reverse pointers reset
		// end of insertion point for reverse pointers reset
	}

	return
}

// this field is used during the restauration process.
// it stores the ID at the backup time and is used for renumbering
var BackRepoValueid_atBckpTime_newID map[uint]uint
