// generated by ModelGongFileTemplate
package models

import (
	"errors"
	"fmt"
	"log"
	"os"
	"path"
	"regexp"
	"sort"
	"strings"
)

// errUnkownEnum is returns when a value cannot match enum values
var errUnkownEnum = errors.New("unkown enum")

// swagger:ignore
type __void any

// needed for creating set of instances in the stage
var __member __void

// GongStructInterface is the interface met by GongStructs
// It allows runtime reflexion of instances (without the hassle of the "reflect" package)
type GongStructInterface interface {
	GetName() (res string)
	GetFields() (res []string)
	GetFieldStringValue(fieldName string) (res string)
}

// StageStruct enables storage of staged instances
// swagger:ignore
type StageStruct struct { // insertion point for definition of arrays registering instances
	Countrys           map[*Country]any
	Countrys_mapString map[string]*Country

	OnAfterCountryCreateCallback OnAfterCreateInterface[Country]
	OnAfterCountryUpdateCallback OnAfterUpdateInterface[Country]
	OnAfterCountryDeleteCallback OnAfterDeleteInterface[Country]
	OnAfterCountryReadCallback   OnAfterReadInterface[Country]

	Hellos           map[*Hello]any
	Hellos_mapString map[string]*Hello

	OnAfterHelloCreateCallback OnAfterCreateInterface[Hello]
	OnAfterHelloUpdateCallback OnAfterUpdateInterface[Hello]
	OnAfterHelloDeleteCallback OnAfterDeleteInterface[Hello]
	OnAfterHelloReadCallback   OnAfterReadInterface[Hello]

	AllModelsStructCreateCallback AllModelsStructCreateInterface

	AllModelsStructDeleteCallback AllModelsStructDeleteInterface

	BackRepo BackRepoInterface

	// if set will be called before each commit to the back repo
	OnInitCommitCallback          OnInitCommitInterface
	OnInitCommitFromFrontCallback OnInitCommitInterface
	OnInitCommitFromBackCallback  OnInitCommitInterface

	// store the number of instance per gongstruct
	Map_GongStructName_InstancesNb map[string]int
}

type OnInitCommitInterface interface {
	BeforeCommit(stage *StageStruct)
}

// OnAfterCreateInterface callback when an instance is updated from the front
type OnAfterCreateInterface[Type Gongstruct] interface {
	OnAfterCreate(stage *StageStruct,
		instance *Type)
}

// OnAfterReadInterface callback when an instance is updated from the front
type OnAfterReadInterface[Type Gongstruct] interface {
	OnAfterRead(stage *StageStruct,
		instance *Type)
}

// OnAfterUpdateInterface callback when an instance is updated from the front
type OnAfterUpdateInterface[Type Gongstruct] interface {
	OnAfterUpdate(stage *StageStruct, old, new *Type)
}

// OnAfterDeleteInterface callback when an instance is updated from the front
type OnAfterDeleteInterface[Type Gongstruct] interface {
	OnAfterDelete(stage *StageStruct,
		staged, front *Type)
}

type BackRepoInterface interface {
	Commit(stage *StageStruct)
	Checkout(stage *StageStruct)
	Backup(stage *StageStruct, dirPath string)
	Restore(stage *StageStruct, dirPath string)
	BackupXL(stage *StageStruct, dirPath string)
	RestoreXL(stage *StageStruct, dirPath string)
	// insertion point for Commit and Checkout signatures
	CommitCountry(country *Country)
	CheckoutCountry(country *Country)
	CommitHello(hello *Hello)
	CheckoutHello(hello *Hello)
	GetLastCommitFromBackNb() uint
	GetLastPushFromFrontNb() uint
}

// swagger:ignore instructs the gong compiler (gongc) to avoid this particular struct
var Stage StageStruct = StageStruct{ // insertion point for array initiatialisation
	Countrys:           make(map[*Country]any),
	Countrys_mapString: make(map[string]*Country),

	Hellos:           make(map[*Hello]any),
	Hellos_mapString: make(map[string]*Hello),

	// end of insertion point
	Map_GongStructName_InstancesNb: make(map[string]int),
}

func (stage *StageStruct) Commit() {
	if stage.BackRepo != nil {
		stage.BackRepo.Commit(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Country"] = len(stage.Countrys)
	stage.Map_GongStructName_InstancesNb["Hello"] = len(stage.Hellos)

}

func (stage *StageStruct) Checkout() {
	if stage.BackRepo != nil {
		stage.BackRepo.Checkout(stage)
	}

	// insertion point for computing the map of number of instances per gongstruct
	stage.Map_GongStructName_InstancesNb["Country"] = len(stage.Countrys)
	stage.Map_GongStructName_InstancesNb["Hello"] = len(stage.Hellos)

}

// backup generates backup files in the dirPath
func (stage *StageStruct) Backup(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Backup(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) Restore(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.Restore(stage, dirPath)
	}
}

// backup generates backup files in the dirPath
func (stage *StageStruct) BackupXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.BackupXL(stage, dirPath)
	}
}

// Restore resets Stage & BackRepo and restores their content from the restore files in dirPath
func (stage *StageStruct) RestoreXL(dirPath string) {
	if stage.BackRepo != nil {
		stage.BackRepo.RestoreXL(stage, dirPath)
	}
}

// insertion point for cumulative sub template with model space calls
// Stage puts country to the model stage
func (country *Country) Stage() *Country {
	Stage.Countrys[country] = __member
	Stage.Countrys_mapString[country.Name] = country

	return country
}

// Unstage removes country off the model stage
func (country *Country) Unstage() *Country {
	delete(Stage.Countrys, country)
	delete(Stage.Countrys_mapString, country.Name)
	return country
}

// commit country to the back repo (if it is already staged)
func (country *Country) Commit() *Country {
	if _, ok := Stage.Countrys[country]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitCountry(country)
		}
	}
	return country
}

// Checkout country to the back repo (if it is already staged)
func (country *Country) Checkout() *Country {
	if _, ok := Stage.Countrys[country]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutCountry(country)
		}
	}
	return country
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of country to the model stage
func (country *Country) StageCopy() *Country {
	_country := new(Country)
	*_country = *country
	_country.Stage()
	return _country
}

// StageAndCommit appends country to the model stage and commit to the orm repo
func (country *Country) StageAndCommit() *Country {
	country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
	return country
}

// DeleteStageAndCommit appends country to the model stage and commit to the orm repo
func (country *Country) DeleteStageAndCommit() *Country {
	country.Unstage()
	DeleteORMCountry(country)
	return country
}

// StageCopyAndCommit appends a copy of country to the model stage and commit to the orm repo
func (country *Country) StageCopyAndCommit() *Country {
	_country := new(Country)
	*_country = *country
	_country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
	return _country
}

// CreateORMCountry enables dynamic staging of a Country instance
func CreateORMCountry(country *Country) {
	country.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMCountry(country)
	}
}

// DeleteORMCountry enables dynamic staging of a Country instance
func DeleteORMCountry(country *Country) {
	country.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMCountry(country)
	}
}

// for satisfaction of GongStruct interface
func (country *Country) GetName() (res string) {
	return country.Name
}

// Stage puts hello to the model stage
func (hello *Hello) Stage() *Hello {
	Stage.Hellos[hello] = __member
	Stage.Hellos_mapString[hello.Name] = hello

	return hello
}

// Unstage removes hello off the model stage
func (hello *Hello) Unstage() *Hello {
	delete(Stage.Hellos, hello)
	delete(Stage.Hellos_mapString, hello.Name)
	return hello
}

// commit hello to the back repo (if it is already staged)
func (hello *Hello) Commit() *Hello {
	if _, ok := Stage.Hellos[hello]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CommitHello(hello)
		}
	}
	return hello
}

// Checkout hello to the back repo (if it is already staged)
func (hello *Hello) Checkout() *Hello {
	if _, ok := Stage.Hellos[hello]; ok {
		if Stage.BackRepo != nil {
			Stage.BackRepo.CheckoutHello(hello)
		}
	}
	return hello
}

//
// Legacy, to be deleted
//

// StageCopy appends a copy of hello to the model stage
func (hello *Hello) StageCopy() *Hello {
	_hello := new(Hello)
	*_hello = *hello
	_hello.Stage()
	return _hello
}

// StageAndCommit appends hello to the model stage and commit to the orm repo
func (hello *Hello) StageAndCommit() *Hello {
	hello.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMHello(hello)
	}
	return hello
}

// DeleteStageAndCommit appends hello to the model stage and commit to the orm repo
func (hello *Hello) DeleteStageAndCommit() *Hello {
	hello.Unstage()
	DeleteORMHello(hello)
	return hello
}

// StageCopyAndCommit appends a copy of hello to the model stage and commit to the orm repo
func (hello *Hello) StageCopyAndCommit() *Hello {
	_hello := new(Hello)
	*_hello = *hello
	_hello.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMHello(hello)
	}
	return _hello
}

// CreateORMHello enables dynamic staging of a Hello instance
func CreateORMHello(hello *Hello) {
	hello.Stage()
	if Stage.AllModelsStructCreateCallback != nil {
		Stage.AllModelsStructCreateCallback.CreateORMHello(hello)
	}
}

// DeleteORMHello enables dynamic staging of a Hello instance
func DeleteORMHello(hello *Hello) {
	hello.Unstage()
	if Stage.AllModelsStructDeleteCallback != nil {
		Stage.AllModelsStructDeleteCallback.DeleteORMHello(hello)
	}
}

// for satisfaction of GongStruct interface
func (hello *Hello) GetName() (res string) {
	return hello.Name
}

// swagger:ignore
type AllModelsStructCreateInterface interface { // insertion point for Callbacks on creation
	CreateORMCountry(Country *Country)
	CreateORMHello(Hello *Hello)
}

type AllModelsStructDeleteInterface interface { // insertion point for Callbacks on deletion
	DeleteORMCountry(Country *Country)
	DeleteORMHello(Hello *Hello)
}

func (stage *StageStruct) Reset() { // insertion point for array reset
	stage.Countrys = make(map[*Country]any)
	stage.Countrys_mapString = make(map[string]*Country)

	stage.Hellos = make(map[*Hello]any)
	stage.Hellos_mapString = make(map[string]*Hello)

}

func (stage *StageStruct) Nil() { // insertion point for array nil
	stage.Countrys = nil
	stage.Countrys_mapString = nil

	stage.Hellos = nil
	stage.Hellos_mapString = nil

}

const marshallRes = `package {{PackageName}}

import (
	"time"

	"{{ModelsPackageName}}"
)

// generated in order to avoid error in the package import
// if there are no elements in the stage to marshall
var ___dummy__Stage models.StageStruct
var ___dummy__Time time.Time

// init might be handy if one want to have the data embedded in the binary
// but it has to properly reference the Injection gateway in the main package
// func init() {
// 	_ = __Dummy_time_variable
// 	InjectionGateway["{{databaseName}}"] = {{databaseName}}Injection
// }

// {{databaseName}}Injection will stage objects of database "{{databaseName}}"
func {{databaseName}}Injection() {

	// Declaration of instances to stage{{Identifiers}}

	// Setup of values{{ValueInitializers}}

	// Setup of pointers{{PointersInitializers}}
}

`

const IdentifiersDecls = `
	{{Identifier}} := (&models.{{GeneratedStructName}}{Name: ` + "`" + `{{GeneratedFieldNameValue}}` + "`" + `}).Stage()`

const StringInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = ` + "`" + `{{GeneratedFieldNameValue}}` + "`"

const StringEnumInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const NumberInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const PointerFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = {{GeneratedFieldNameValue}}`

const SliceOfPointersFieldInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}} = append({{Identifier}}.{{GeneratedFieldName}}, {{GeneratedFieldNameValue}})`

const TimeInitStatement = `
	{{Identifier}}.{{GeneratedFieldName}}, _ = time.Parse("2006-01-02 15:04:05.999999999 -0700 MST", "{{GeneratedFieldNameValue}}")`

// Marshall marshall the stage content into the file as an instanciation into a stage
func (stage *StageStruct) Marshall(file *os.File, modelsPackageName, packageName string) {

	name := file.Name()

	if !strings.HasSuffix(name, ".go") {
		log.Fatalln(name + " is not a go filename")
	}

	log.Println("filename of marshall output  is " + name)

	res := marshallRes
	res = strings.ReplaceAll(res, "{{databaseName}}", strings.ReplaceAll(path.Base(name), ".go", ""))
	res = strings.ReplaceAll(res, "{{PackageName}}", packageName)
	res = strings.ReplaceAll(res, "{{ModelsPackageName}}", modelsPackageName)

	// map of identifiers
	// var StageMapDstructIds map[*Dstruct]string
	identifiersDecl := ""
	initializerStatements := ""
	pointersInitializesStatements := ""

	id := ""
	decl := ""
	setValueField := ""

	// insertion initialization of objects to stage
	map_Country_Identifiers := make(map[*Country]string)
	_ = map_Country_Identifiers

	countryOrdered := []*Country{}
	for country := range stage.Countrys {
		countryOrdered = append(countryOrdered, country)
	}
	sort.Slice(countryOrdered[:], func(i, j int) bool {
		return countryOrdered[i].Name < countryOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Country"
	for idx, country := range countryOrdered {

		id = generatesIdentifier("Country", idx, country.Name)
		map_Country_Identifiers[country] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Country")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", country.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Country values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(country.Name))
		initializerStatements += setValueField

	}

	map_Hello_Identifiers := make(map[*Hello]string)
	_ = map_Hello_Identifiers

	helloOrdered := []*Hello{}
	for hello := range stage.Hellos {
		helloOrdered = append(helloOrdered, hello)
	}
	sort.Slice(helloOrdered[:], func(i, j int) bool {
		return helloOrdered[i].Name < helloOrdered[j].Name
	})
	identifiersDecl += "\n\n	// Declarations of staged instances of Hello"
	for idx, hello := range helloOrdered {

		id = generatesIdentifier("Hello", idx, hello.Name)
		map_Hello_Identifiers[hello] = id

		decl = IdentifiersDecls
		decl = strings.ReplaceAll(decl, "{{Identifier}}", id)
		decl = strings.ReplaceAll(decl, "{{GeneratedStructName}}", "Hello")
		decl = strings.ReplaceAll(decl, "{{GeneratedFieldNameValue}}", hello.Name)
		identifiersDecl += decl

		initializerStatements += "\n\n	// Hello values setup"
		// Initialisation of values
		setValueField = StringInitStatement
		setValueField = strings.ReplaceAll(setValueField, "{{Identifier}}", id)
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldName}}", "Name")
		setValueField = strings.ReplaceAll(setValueField, "{{GeneratedFieldNameValue}}", string(hello.Name))
		initializerStatements += setValueField

	}

	// insertion initialization of objects to stage
	for idx, country := range countryOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Country", idx, country.Name)
		map_Country_Identifiers[country] = id

		// Initialisation of values
		if country.Hello != nil {
			setPointerField = PointerFieldInitStatement
			setPointerField = strings.ReplaceAll(setPointerField, "{{Identifier}}", id)
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldName}}", "Hello")
			setPointerField = strings.ReplaceAll(setPointerField, "{{GeneratedFieldNameValue}}", map_Hello_Identifiers[country.Hello])
			pointersInitializesStatements += setPointerField
		}

	}

	for idx, hello := range helloOrdered {
		var setPointerField string
		_ = setPointerField

		id = generatesIdentifier("Hello", idx, hello.Name)
		map_Hello_Identifiers[hello] = id

		// Initialisation of values
	}

	res = strings.ReplaceAll(res, "{{Identifiers}}", identifiersDecl)
	res = strings.ReplaceAll(res, "{{ValueInitializers}}", initializerStatements)
	res = strings.ReplaceAll(res, "{{PointersInitializers}}", pointersInitializesStatements)

	fmt.Fprintln(file, res)
}

// unique identifier per struct
func generatesIdentifier(gongStructName string, idx int, instanceName string) (identifier string) {

	identifier = instanceName
	// Make a Regex to say we only want letters and numbers
	reg, err := regexp.Compile("[^a-zA-Z0-9]+")
	if err != nil {
		log.Fatal(err)
	}
	processedString := reg.ReplaceAllString(instanceName, "_")

	identifier = fmt.Sprintf("__%s__%06d_%s", gongStructName, idx, processedString)

	return
}

// insertion point of functions that provide maps for reverse associations

// generate function for reverse association maps of Country
func (stageStruct *StageStruct) CreateReverseMap_Country_Hello() (res map[*Hello][]*Country) {
	res = make(map[*Hello][]*Country)

	for country := range stageStruct.Countrys {
		if country.Hello != nil {
			hello_ := country.Hello
			var countrys []*Country
			_, ok := res[hello_]
			if ok {
				countrys = res[hello_]
			} else {
				countrys = make([]*Country, 0)
			}
			countrys = append(countrys, country)
			res[hello_] = countrys
		}
	}

	return
}

// generate function for reverse association maps of Hello

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type Gongstruct interface {
	// insertion point for generic types
	Country | Hello
}

// Gongstruct is the type parameter for generated generic function that allows
// - access to staged instances
// - navigation between staged instances by going backward association links between gongstruct
// - full refactoring of Gongstruct identifiers / fields
type PointerToGongstruct interface {
	// insertion point for generic types
	*Country | *Hello
	GetName() string
}

type GongstructSet interface {
	map[any]any |
		// insertion point for generic types
		map[*Country]any |
		map[*Hello]any |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

type GongstructMapString interface {
	map[any]any |
		// insertion point for generic types
		map[string]*Country |
		map[string]*Hello |
		map[*any]any // because go does not support an extra "|" at the end of type specifications
}

// GongGetSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetSet[Type GongstructSet]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[*Country]any:
		return any(&Stage.Countrys).(*Type)
	case map[*Hello]any:
		return any(&Stage.Hellos).(*Type)
	default:
		return nil
	}
}

// GongGetMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GongGetMap[Type GongstructMapString]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case map[string]*Country:
		return any(&Stage.Countrys_mapString).(*Type)
	case map[string]*Hello:
		return any(&Stage.Hellos_mapString).(*Type)
	default:
		return nil
	}
}

// GetGongstructInstancesSet returns the set staged GongstructType instances
// it is usefull because it allows refactoring of gongstruct identifier
func GetGongstructInstancesSet[Type Gongstruct]() *map[*Type]any {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Country:
		return any(&Stage.Countrys).(*map[*Type]any)
	case Hello:
		return any(&Stage.Hellos).(*map[*Type]any)
	default:
		return nil
	}
}

// GetGongstructInstancesMap returns the map of staged GongstructType instances
// it is usefull because it allows refactoring of gong struct identifier
func GetGongstructInstancesMap[Type Gongstruct]() *map[string]*Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get functions
	case Country:
		return any(&Stage.Countrys_mapString).(*map[string]*Type)
	case Hello:
		return any(&Stage.Hellos_mapString).(*map[string]*Type)
	default:
		return nil
	}
}

// GetAssociationName is a generic function that returns an instance of Type
// where each association is filled with an instance whose name is the name of the association
//
// This function can be handy for generating navigation function that are refactorable
func GetAssociationName[Type Gongstruct]() *Type {
	var ret Type

	switch any(ret).(type) {
	// insertion point for instance with special fields
	case Country:
		return any(&Country{
			// Initialisation of associations
			// field is initialized with an instance of Hello with the name of the field
			Hello: &Hello{Name: "Hello"},
		}).(*Type)
	case Hello:
		return any(&Hello{
			// Initialisation of associations
		}).(*Type)
	default:
		return nil
	}
}

// GetPointerReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..1) that is a pointer from one staged Gongstruct (type Start)
// instances to another (type End)
//
// The function provides a map with keys as instances of End and values to arrays of *Start
// the map is construed by iterating over all Start instances and populationg keys with End instances
// and values with slice of Start instances
func GetPointerReverseMap[Start, End Gongstruct](fieldname string) map[*End][]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Country
	case Country:
		switch fieldname {
		// insertion point for per direct association field
		case "Hello":
			res := make(map[*Hello][]*Country)
			for country := range Stage.Countrys {
				if country.Hello != nil {
					hello_ := country.Hello
					var countrys []*Country
					_, ok := res[hello_]
					if ok {
						countrys = res[hello_]
					} else {
						countrys = make([]*Country, 0)
					}
					countrys = append(countrys, country)
					res[hello_] = countrys
				}
			}
			return any(res).(map[*End][]*Start)
		}
	// reverse maps of direct associations of Hello
	case Hello:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetSliceOfPointersReverseMap allows backtrack navigation of any Start.Fieldname
// associations (0..N) between one staged Gongstruct instances and many others
//
// The function provides a map with keys as instances of End and values to *Start instances
// the map is construed by iterating over all Start instances and populating keys with End instances
// and values with the Start instances
func GetSliceOfPointersReverseMap[Start, End Gongstruct](fieldname string) map[*End]*Start {
	var ret Start

	switch any(ret).(type) {
	// insertion point of functions that provide maps for reverse associations
	// reverse maps of direct associations of Country
	case Country:
		switch fieldname {
		// insertion point for per direct association field
		}
	// reverse maps of direct associations of Hello
	case Hello:
		switch fieldname {
		// insertion point for per direct association field
		}
	}
	return nil
}

// GetGongstructName returns the name of the Gongstruct
// this can be usefull if one want program robust to refactoring
func GetGongstructName[Type Gongstruct]() (res string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Country:
		res = "Country"
	case Hello:
		res = "Hello"
	}
	return res
}

// GetFields return the array of the fields
func GetFields[Type Gongstruct]() (res []string) {

	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct name
	case Country:
		res = []string{"Name", "Hello"}
	case Hello:
		res = []string{"Name"}
	}
	return
}

func GetFieldStringValue[Type Gongstruct](instance Type, fieldName string) (res string) {
	var ret Type

	switch any(ret).(type) {
	// insertion point for generic get gongstruct field value
	case Country:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Country).Name
		case "Hello":
			if any(instance).(Country).Hello != nil {
				res = any(instance).(Country).Hello.Name
			}
		}
	case Hello:
		switch fieldName {
		// string value of fields
		case "Name":
			res = any(instance).(Hello).Name
		}
	}
	return
}

// insertion point of enum utility functions
// Last line of the template
