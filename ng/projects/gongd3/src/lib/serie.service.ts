// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs';
import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { SerieDB } from './serie-db';
import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { KeyDB } from './key-db'
import { ValueDB } from './value-db'

@Injectable({
  providedIn: 'root'
})
export class SerieService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  SerieServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private seriesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.seriesUrl = origin + '/api/github.com/fullstack-lang/gongd3/go/v1/series';
  }

  /** GET series from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB[]> {
    return this.getSeries(GONG__StackPath, frontRepo)
  }
  getSeries(GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<SerieDB[]>(this.seriesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<SerieDB[]>('getSeries', []))
      );
  }

  /** GET serie by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {
    return this.getSerie(id, GONG__StackPath, frontRepo)
  }
  getSerie(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.seriesUrl}/${id}`;
    return this.http.get<SerieDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched serie id=${id}`)),
      catchError(this.handleError<SerieDB>(`getSerie id=${id}`))
    );
  }

  /** POST: add a new serie to the server */
  post(seriedb: SerieDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {
    return this.postSerie(seriedb, GONG__StackPath, frontRepo)
  }
  postSerie(seriedb: SerieDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    if (seriedb.Key != undefined) {
      seriedb.SeriePointersEncoding.KeyID.Int64 = seriedb.Key.ID
      seriedb.SeriePointersEncoding.KeyID.Valid = true
    }
    seriedb.Key = undefined
    seriedb.SeriePointersEncoding.Values = []
    for (let _value of seriedb.Values) {
      seriedb.SeriePointersEncoding.Values.push(_value.ID)
    }
    seriedb.Values = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<SerieDB>(this.seriesUrl, seriedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        seriedb.Key = frontRepo.Keys.get(seriedb.SeriePointersEncoding.KeyID.Int64)
        seriedb.Values = new Array<ValueDB>()
        for (let _id of seriedb.SeriePointersEncoding.Values) {
          let _value = frontRepo.Values.get(_id)
          if (_value != undefined) {
            seriedb.Values.push(_value!)
          }
        }
        // this.log(`posted seriedb id=${seriedb.ID}`)
      }),
      catchError(this.handleError<SerieDB>('postSerie'))
    );
  }

  /** DELETE: delete the seriedb from the server */
  delete(seriedb: SerieDB | number, GONG__StackPath: string): Observable<SerieDB> {
    return this.deleteSerie(seriedb, GONG__StackPath)
  }
  deleteSerie(seriedb: SerieDB | number, GONG__StackPath: string): Observable<SerieDB> {
    const id = typeof seriedb === 'number' ? seriedb : seriedb.ID;
    const url = `${this.seriesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<SerieDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted seriedb id=${id}`)),
      catchError(this.handleError<SerieDB>('deleteSerie'))
    );
  }

  /** PUT: update the seriedb on the server */
  update(seriedb: SerieDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {
    return this.updateSerie(seriedb, GONG__StackPath, frontRepo)
  }
  updateSerie(seriedb: SerieDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<SerieDB> {
    const id = typeof seriedb === 'number' ? seriedb : seriedb.ID;
    const url = `${this.seriesUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers
    if (seriedb.Key != undefined) {
      seriedb.SeriePointersEncoding.KeyID.Int64 = seriedb.Key.ID
      seriedb.SeriePointersEncoding.KeyID.Valid = true
    }
    seriedb.Key = undefined
    seriedb.SeriePointersEncoding.Values = []
    for (let _value of seriedb.Values) {
      seriedb.SeriePointersEncoding.Values.push(_value.ID)
    }
    seriedb.Values = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<SerieDB>(url, seriedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        seriedb.Key = frontRepo.Keys.get(seriedb.SeriePointersEncoding.KeyID.Int64)
        seriedb.Values = new Array<ValueDB>()
        for (let _id of seriedb.SeriePointersEncoding.Values) {
          let _value = frontRepo.Values.get(_id)
          if (_value != undefined) {
            seriedb.Values.push(_value!)
          }
        }
        // this.log(`updated seriedb id=${seriedb.ID}`)
      }),
      catchError(this.handleError<SerieDB>('updateSerie'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in SerieService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("SerieService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
