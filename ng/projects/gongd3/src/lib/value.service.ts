// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { ValueDB } from './value-db'
import { Value, CopyValueToValueDB } from './value'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports

@Injectable({
  providedIn: 'root'
})
export class ValueService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  ValueServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private valuesUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.valuesUrl = origin + '/api/github.com/fullstack-lang/gongd3/go/v1/values';
  }

  /** GET values from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB[]> {
    return this.getValues(GONG__StackPath, frontRepo)
  }
  getValues(GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<ValueDB[]>(this.valuesUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<ValueDB[]>('getValues', []))
      );
  }

  /** GET value by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {
    return this.getValue(id, GONG__StackPath, frontRepo)
  }
  getValue(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.valuesUrl}/${id}`;
    return this.http.get<ValueDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched value id=${id}`)),
      catchError(this.handleError<ValueDB>(`getValue id=${id}`))
    );
  }

  /** POST: add a new value to the server */
  post(valuedb: ValueDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {
    return this.postValue(valuedb, GONG__StackPath, frontRepo)
  }
  postValue(valuedb: ValueDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<ValueDB>(this.valuesUrl, valuedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        // this.log(`posted valuedb id=${valuedb.ID}`)
      }),
      catchError(this.handleError<ValueDB>('postValue'))
    );
  }

  /** DELETE: delete the valuedb from the server */
  delete(valuedb: ValueDB | number, GONG__StackPath: string): Observable<ValueDB> {
    return this.deleteValue(valuedb, GONG__StackPath)
  }
  deleteValue(valuedb: ValueDB | number, GONG__StackPath: string): Observable<ValueDB> {
    const id = typeof valuedb === 'number' ? valuedb : valuedb.ID;
    const url = `${this.valuesUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<ValueDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted valuedb id=${id}`)),
      catchError(this.handleError<ValueDB>('deleteValue'))
    );
  }

  // updateFront copy value to a version with encoded pointers and update to the back
  updateFront(value: Value, GONG__StackPath: string): Observable<ValueDB> {
    let valueDB = new ValueDB
    CopyValueToValueDB(value, valueDB)
    const id = typeof valueDB === 'number' ? valueDB : valueDB.ID
    const url = `${this.valuesUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<ValueDB>(url, valueDB, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<ValueDB>('updateValue'))
    );
  }

  /** PUT: update the valuedb on the server */
  update(valuedb: ValueDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {
    return this.updateValue(valuedb, GONG__StackPath, frontRepo)
  }
  updateValue(valuedb: ValueDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ValueDB> {
    const id = typeof valuedb === 'number' ? valuedb : valuedb.ID;
    const url = `${this.valuesUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<ValueDB>(url, valuedb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        // this.log(`updated valuedb id=${valuedb.ID}`)
      }),
      catchError(this.handleError<ValueDB>('updateValue'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in ValueService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("ValueService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
