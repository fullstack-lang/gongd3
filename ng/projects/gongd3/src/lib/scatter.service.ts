// generated by ng_file_service_ts
import { Injectable, Component, Inject } from '@angular/core';
import { HttpClientModule, HttpParams } from '@angular/common/http';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { DOCUMENT, Location } from '@angular/common'

/*
 * Behavior subject
 */
import { BehaviorSubject } from 'rxjs'
import { Observable, of } from 'rxjs'
import { catchError, map, tap } from 'rxjs/operators'

import { ScatterDB } from './scatter-db'
import { Scatter, CopyScatterToScatterDB } from './scatter'

import { FrontRepo, FrontRepoService } from './front-repo.service';

// insertion point for imports
import { KeyDB } from './key-db'
import { SerieDB } from './serie-db'

@Injectable({
  providedIn: 'root'
})
export class ScatterService {

  // Kamar Ra√Ømo: Adding a way to communicate between components that share information
  // so that they are notified of a change.
  ScatterServiceChanged: BehaviorSubject<string> = new BehaviorSubject("");

  private scattersUrl: string

  constructor(
    private http: HttpClient,
    @Inject(DOCUMENT) private document: Document
  ) {
    // path to the service share the same origin with the path to the document
    // get the origin in the URL to the document
    let origin = this.document.location.origin

    // if debugging with ng, replace 4200 with 8080
    origin = origin.replace("4200", "8080")

    // compute path to the service
    this.scattersUrl = origin + '/api/github.com/fullstack-lang/gongd3/go/v1/scatters';
  }

  /** GET scatters from the server */
  // gets is more robust to refactoring
  gets(GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB[]> {
    return this.getScatters(GONG__StackPath, frontRepo)
  }
  getScatters(GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB[]> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    return this.http.get<ScatterDB[]>(this.scattersUrl, { params: params })
      .pipe(
        tap(),
        catchError(this.handleError<ScatterDB[]>('getScatters', []))
      );
  }

  /** GET scatter by id. Will 404 if id not found */
  // more robust API to refactoring
  get(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {
    return this.getScatter(id, GONG__StackPath, frontRepo)
  }
  getScatter(id: number, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)

    const url = `${this.scattersUrl}/${id}`;
    return this.http.get<ScatterDB>(url, { params: params }).pipe(
      // tap(_ => this.log(`fetched scatter id=${id}`)),
      catchError(this.handleError<ScatterDB>(`getScatter id=${id}`))
    );
  }

  /** POST: add a new scatter to the server */
  post(scatterdb: ScatterDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {
    return this.postScatter(scatterdb, GONG__StackPath, frontRepo)
  }
  postScatter(scatterdb: ScatterDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {

    // insertion point for reset of pointers and reverse pointers (to avoid circular JSON)
    if (scatterdb.X != undefined) {
      scatterdb.ScatterPointersEncoding.XID.Int64 = scatterdb.X.ID
      scatterdb.ScatterPointersEncoding.XID.Valid = true
    }
    scatterdb.X = undefined
    if (scatterdb.Y != undefined) {
      scatterdb.ScatterPointersEncoding.YID.Int64 = scatterdb.Y.ID
      scatterdb.ScatterPointersEncoding.YID.Valid = true
    }
    scatterdb.Y = undefined
    if (scatterdb.Text != undefined) {
      scatterdb.ScatterPointersEncoding.TextID.Int64 = scatterdb.Text.ID
      scatterdb.ScatterPointersEncoding.TextID.Valid = true
    }
    scatterdb.Text = undefined
    scatterdb.ScatterPointersEncoding.Set = []
    for (let _serie of scatterdb.Set) {
      scatterdb.ScatterPointersEncoding.Set.push(_serie.ID)
    }
    scatterdb.Set = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.post<ScatterDB>(this.scattersUrl, scatterdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        scatterdb.X = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.XID.Int64)
        scatterdb.Y = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.YID.Int64)
        scatterdb.Text = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.TextID.Int64)
        scatterdb.Set = new Array<SerieDB>()
        for (let _id of scatterdb.ScatterPointersEncoding.Set) {
          let _serie = frontRepo.Series.get(_id)
          if (_serie != undefined) {
            scatterdb.Set.push(_serie!)
          }
        }
        // this.log(`posted scatterdb id=${scatterdb.ID}`)
      }),
      catchError(this.handleError<ScatterDB>('postScatter'))
    );
  }

  /** DELETE: delete the scatterdb from the server */
  delete(scatterdb: ScatterDB | number, GONG__StackPath: string): Observable<ScatterDB> {
    return this.deleteScatter(scatterdb, GONG__StackPath)
  }
  deleteScatter(scatterdb: ScatterDB | number, GONG__StackPath: string): Observable<ScatterDB> {
    const id = typeof scatterdb === 'number' ? scatterdb : scatterdb.ID;
    const url = `${this.scattersUrl}/${id}`;

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.delete<ScatterDB>(url, httpOptions).pipe(
      tap(_ => this.log(`deleted scatterdb id=${id}`)),
      catchError(this.handleError<ScatterDB>('deleteScatter'))
    );
  }

  // updateFront copy scatter to a version with encoded pointers and update to the back
  updateFront(scatter: Scatter, GONG__StackPath: string): Observable<ScatterDB> {
    let scatterDB = new ScatterDB
    CopyScatterToScatterDB(scatter, scatterDB)
    const id = typeof scatterDB === 'number' ? scatterDB : scatterDB.ID
    const url = `${this.scattersUrl}/${id}`;
    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    }

    return this.http.put<ScatterDB>(url, scatterDB, httpOptions).pipe(
      tap(_ => {
      }),
      catchError(this.handleError<ScatterDB>('updateScatter'))
    );
  }

  /** PUT: update the scatterdb on the server */
  update(scatterdb: ScatterDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {
    return this.updateScatter(scatterdb, GONG__StackPath, frontRepo)
  }
  updateScatter(scatterdb: ScatterDB, GONG__StackPath: string, frontRepo: FrontRepo): Observable<ScatterDB> {
    const id = typeof scatterdb === 'number' ? scatterdb : scatterdb.ID;
    const url = `${this.scattersUrl}/${id}`;

    // insertion point for reset of pointers (to avoid circular JSON)
    // and encoding of pointers
    if (scatterdb.X != undefined) {
      scatterdb.ScatterPointersEncoding.XID.Int64 = scatterdb.X.ID
      scatterdb.ScatterPointersEncoding.XID.Valid = true
    }
    scatterdb.X = undefined
    if (scatterdb.Y != undefined) {
      scatterdb.ScatterPointersEncoding.YID.Int64 = scatterdb.Y.ID
      scatterdb.ScatterPointersEncoding.YID.Valid = true
    }
    scatterdb.Y = undefined
    if (scatterdb.Text != undefined) {
      scatterdb.ScatterPointersEncoding.TextID.Int64 = scatterdb.Text.ID
      scatterdb.ScatterPointersEncoding.TextID.Valid = true
    }
    scatterdb.Text = undefined
    scatterdb.ScatterPointersEncoding.Set = []
    for (let _serie of scatterdb.Set) {
      scatterdb.ScatterPointersEncoding.Set.push(_serie.ID)
    }
    scatterdb.Set = []

    let params = new HttpParams().set("GONG__StackPath", GONG__StackPath)
    let httpOptions = {
      headers: new HttpHeaders({ 'Content-Type': 'application/json' }),
      params: params
    };

    return this.http.put<ScatterDB>(url, scatterdb, httpOptions).pipe(
      tap(_ => {
        // insertion point for restoration of reverse pointers
        scatterdb.X = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.XID.Int64)
        scatterdb.Y = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.YID.Int64)
        scatterdb.Text = frontRepo.Keys.get(scatterdb.ScatterPointersEncoding.TextID.Int64)
        scatterdb.Set = new Array<SerieDB>()
        for (let _id of scatterdb.ScatterPointersEncoding.Set) {
          let _serie = frontRepo.Series.get(_id)
          if (_serie != undefined) {
            scatterdb.Set.push(_serie!)
          }
        }
        // this.log(`updated scatterdb id=${scatterdb.ID}`)
      }),
      catchError(this.handleError<ScatterDB>('updateScatter'))
    );
  }

  /**
   * Handle Http operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError<T>(operation = 'operation in ScatterService', result?: T) {
    return (error: any): Observable<T> => {

      // TODO: send the error to remote logging infrastructure
      console.error("ScatterService" + error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  private log(message: string) {
    console.log(message)
  }
}
